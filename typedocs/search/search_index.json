{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to the Bashlib Homepage.</p> <p>Bashlib is a Command Line Interface for working with Solid Pods, made by  Ruben Dedecker at the KNoWS team at Ghent University. </p> <p>An introduction to quickly setting up a Community Solid Server instance and  interfacing with it using Bashlib is found in the tutorial section.</p> <p>Documentation on the tool and the available commands is found in the documentation section.</p> <p>Documentation may be incomplete in content and structure. Feel free to open a discussion and report incorrect information.</p>"},{"location":"tutorial/","title":"Bashlib Tutorial","text":"<p>This tutorial provides a quick setup of a Community Solid Server, and some useful interactions to manage resources on a created Solid pod.</p>"},{"location":"tutorial/#setting-up-a-solid-server","title":"Setting up a Solid Server","text":"<p>To use Bashlib, we first explain how to setup your own local Solid Server on which  you can create your first Solid pod. In case you already have a Solid pod, feel free to skip this section. Alteratively, you may want to create a Solid pod on one of  the free Pod provider services. Note that when using a free provider, if something goes wrong you might not be able to recover your data, or that service may be relatively slow, as there are free and community hosted. Additionally, only server running the Community Solid Server or Inrupt Enterprise Solid Server versions will be able to make client credentials to authenticate automatically without needing an interactive browser session. A free CSS hosting service can be found here. A free ESS hosting service can be found here.</p> <p> To setup your own local Community Solid Server, we make use in this tutorial of the Community Solid Server.  The full tutorial can be found here. When you are done with the tutorial, you are free to remove the current folder to delete all created files!</p> <p>We use NPX to setup a CSS instance, and use a file config to store all data in the <code>data/</code> folder. Ideally execute the tutorial in an empty directory, so afterwards you can remove all tutorial data by removing this directory! <pre><code>npx @solid/community-server -c @css:config/file.json -f data/\n</code></pre></p> <p>Congratulations! Your own CSS instance is now running on localhost on port 3000! Keep this shell open during the tutorial! You can confirm this by browsing to <code>http://localhost:3000</code> in the browser, and you will be greeted with a setup screen.</p>"},{"location":"tutorial/#creating-an-account","title":"Creating an account","text":"<p>Now we will create an account and associated WebID on this local CSS instance. Navigating to <code>http://localhost:3000</code> in the browser, and you will be greeted with a setup screen. Press the Sign up for an account link to create an account on this local CSS instance. As this is a local instance, the email does not  really matter, as this is only used for authentication purposes and recovering a pod, but is never verified.</p> <p>For now, we make an example person Bob using his email <code>bob@test.com</code> and password <code>bob</code>. Next, we make a pod for this account by pressing the <code>Create pod</code> link! Here, we provide a pod name, for example <code>mydatapod</code>. Congratulations, you just created a new data pod at <code>http://localhost:3000/mydatapod/</code> and associated WebID at <code>http://localhost:3000/mydatapod/profile/card#me</code>!</p>"},{"location":"tutorial/#setting-up-bashlib","title":"Setting up Bashlib","text":"<p>With our Solid pod and WebID created, now it is time to setup Bashlib! For a quick setup, we use NPX <pre><code>npx solid-bashlib curl http://localhost:3000/mydatapod/profile/card#me\n</code></pre> which prompts to install bashlib, and on installation with show your WebID profile.</p> <p>Alternatively, a local setup can be cloned from github. <pre><code>git clone https://github.com/SolidLabResearch/Bashlib.git\ncd Bashlib\nnpm install\nnpm run build;\n\nnode bin/solid.js curl http://localhost:3000/mydatapod/profile/card#me\n</code></pre></p> <p>For the remainder of this tutorial, we will use <code>sld</code> as the alias for <code>npx solid-bashlib</code>.</p>"},{"location":"tutorial/#managing-authentication","title":"Managing Authentication","text":"<p>As Solid aims to provide secure online data management,  working with secured resources requires users to be  authenticated for the system to evaluate their access.</p> <p>The full documentation on the authentication options for bashlib can be found in the authentication management section.</p>"},{"location":"tutorial/#executing-commands-without-authentication","title":"Executing commands without authentication","text":"<p>To run commands over public data without any authentication, we can start bashlib with the <code>--auth</code> flag set to none to prevent it from automatically trying to authenticate requests. We can for example make an unauthenticated request to our  created WebID as follows (WebID resources are always public): <pre><code>sld --auth none curl --header \"Accept: application/n-triples\" http://localhost:3000/mydatapod/profile/card#me\n</code></pre> This creates unauthenticated fetch request to the WebID resource and outputs the result on the command line. As we passed a <code>--header</code> option that requests the result in an n-triples format, the returned data is formatted in an n-triples format.</p>"},{"location":"tutorial/#setting-a-webid-and-interactive-authentication","title":"Setting a WebId and interactive authentication","text":"<p>However, for most personal use resource operations will require the user to be authenticated. To start, we pass our created WebID to Bashlib. This can either be done using the interactive interface by running: <pre><code>sld auth set\n</code></pre> and selecting the option: <code>Authenticate using new WebID</code> and providing your WebID here. Alternatively, the WebID option can be provided  directly in the arguments as follows: <pre><code>sld auth set http://localhost:3000/mydatapod/profile/card#me\n</code></pre></p> <p>To see the WebID used by Bashlib to authenticate requests, we can run <pre><code>sld auth show --pretty\n</code></pre> which shows us that our WebID is now used by bashlib to authenticate requests.</p> <p>However, now we've only told Bashlib our WebID, we have not yet given it the means to authenticate a request using this WebID. There are two options for  authenticating with Bashlib to be able to make authenticated requests. We can use an interactive authentication flow that uses our browser to authenticate, or we can create a credentials token that we can store which will allow us to create authenticated requests directly without needing an interactive browser session.</p> <p>Per default, Bashlib will use a dynamic authentication approach, where it will first look if there is an active authenticated session it can reuse. If not, it will try to create a  new session using any stored credentials token. If none can be found, it will open a browser window and have the user authenticate themselves interactively using the browser.</p> <p>To create a listing of the profile directory of our Solid pod, run the following command: <pre><code>npx solid-bashlib ls base:/profile/\n</code></pre> This <code>base:</code> is an alias for our pod root (<code>http://localhost:3000/mydatapod/</code>),  if it can be discovered from the user WebID. Upon running the command, a browser window will pop-up asking the user to authenticate themselves. Once logged in, looking back at the command line we see that a listing is displayed of the profile container, which is only visible to the user WebID, so the authentication was successful.</p> <p>Additionally, running the listing command again, we see that no authentication is required,  as Bashlib stored the previous session, and reuses this session to authenticate subsequent  requests made for the same WebID. <pre><code>npx solid-bashlib ls base:/profile --pretty\n</code></pre></p> <p>Looking at the current authentication status <pre><code>sld auth show --pretty\n</code></pre> we see that an active session is available now.</p>"},{"location":"tutorial/#creating-a-credentials-token-to-automate-authentication","title":"Creating a credentials token to automate authentication","text":"<p>However, having to authenticate interactions can be an overhead, especially if commands are to be executed automatically from a script. To automate the authentication flow, we need to make a token that will allow us to do an authentication flow that does not require a browser window.</p> <p>Currently the generation of credential tokens that can directly authenticate a user session is only provided by the Community Solid Server and the Enterprise Solid Server. Both implementations differ however. In this section we only address the creation of a token for the Community Solid Server. If you have a pod on an Enterprise Solid Server, you can follow the documentation for  ESS token creation in the authentication section.</p> <p>To create the credentials token for our current WebID in Bashlib, we execute the following command: <pre><code>sld auth create-token-css\n</code></pre> This will prompt us on if the token we want to create is for our currently logged in user.  Press <code>y</code> to continue. Now we are prompted for our email (bob@test.com) and password (bob).</p> <p>To confirm the generation of our token, we run the show command again, which now indicates we have an auth token present. <pre><code>npx solid-bashlib auth show --pretty\n</code></pre> From now on, after session expiration, new sessions will be automatically generated through  this token without going through an interactive browser session.</p> <p>All authentication information is stored per default at ~/.solid/</p>"},{"location":"tutorial/#managing-authorization","title":"Managing authorization","text":"<p>Now that we have an authorized user, we can manage the authorization rules for the resources  on our Solid pod. Note that Solid has two competing authorization systems. The Web Access Controls specification that uses <code>.acl</code> resources to manage resource access, and the Access Control Protocol that uses <code>.acp</code> resources to manage resource access.</p> <p>Bashlib implements two different access management regimes: It fully implements the WAC suite for  listing and editing permissions and removing permission resources, and it implements the universal access suite that can work with both WAC and ACP access management systems. However this universal  system is less expressive in its functionality. Bashlib will automatically detect the used access control mechanism, but enables additional functionality when working with pods hosted on a WAC-based Solid Server such as access propagation and identity groups.</p>"},{"location":"tutorial/#listing-authorization","title":"Listing authorization","text":"<p>To list the permissions set on the root of our pod, run: <pre><code>sld access list --pretty base:/\n</code></pre> We see that our WebID has full permissions to read, write, append and control resources on our pod (deleting a resource requires write permissions). We also notice public read permissions on our root container, which we will change in the next section. If our pod is hosted on a WAC-based Solid Server (such as the Community Solid Server we setup above), we see the WebID permissions on our root are set as <code>default</code>, meaning they are enforced on all sub-containers and resources of this root container unless otherwise specified by these sub-containers or resources. Additionally, the <code>inherited</code> field shows if this authorization state is defined by an <code>.acl</code> file tied directly to the resource itself (in that case the value is no), or if it was derived of a default permissions set by one of the resource parents (in that case the value is yes).</p>"},{"location":"tutorial/#editing-authorization","title":"Editing authorization","text":"<p>As shown above, currently our pod root container is set to be publicly readable. To change these permissions, we set the public access rights to our root container to be nothing. When interacting pods hosted on a WAC-based Solid Server, we can use the <code>--default</code> flag to make these access rules the default, however as the default access defined by the system is no access, this makes no real difference in this case. To do this, we run the following command: <pre><code>sld access set base:/ p=\n</code></pre> The <code>base:/</code> value targets our pod root container.  The <code>p</code> value sets the access target as <code>public</code>,  and the empty space after the <code>=</code> symbol indicates  that the permissions given to the public are none.</p> <p>We confirm this by listing the permissions again: <pre><code>sld access list --pretty base:/\n</code></pre> showing public read permissions are not set anymore. Additionally, we see that a resource request to the full URI gives us a <code>401 Unauthenticated</code> response. <pre><code>sld --auth none curl http://localhost:3000/mydatapod/\n</code></pre></p> <p>If we now want to create an inbox container, to which people can write resources but not read resources,  we first make a new directory <pre><code>sld mkdir base:/inbox/\n</code></pre> that we can confirm in our listing to exist now: <pre><code>sld ls base:/\n</code></pre></p> <p>Listing permissions for this created container, we see  that no public permissions are set for this container. <pre><code>sld access list --pretty base:/inbox/ \n</code></pre></p> <p>Now, we set public read permissions for this resource: <pre><code>sld access set base:/inbox/ p=w\n</code></pre> Listing permissions again shows that now only read permissions are assigned to this container. <pre><code>sld access list --pretty base:/inbox/ \n</code></pre></p> <p>Note that setting permissions for an identifier removes  any existing permissions. Setting read permissions as follows <pre><code>sld access set base:/inbox/ p=r\n</code></pre> will remove the existing write permission, as we did not renew it in this operation. <pre><code>sld access list --pretty base:/inbox/ \n</code></pre></p> <p>To give access to our contact to also read our inbox,  we assign access rules for their WebID. <pre><code>sld access set base:/inbox/ https://poeple.org/alice/webid=r\n</code></pre> Listing the permissions now we see Alice has been given read access to our inbox container.</p>"},{"location":"tutorial/#requesting-and-querying-resources","title":"Requesting and querying resources","text":"<p>In addition to authentication and authorization management, Bashlib provides a set of commands aimed at the requesting and querying of resources that we will go over here. The documentation for every command can be found here.</p> <p>The first command we have already touched upon is <code>curl</code>. It mimics the curl command provided by BASH and provides options for choosing the HTTP method, the body and more.  Simply executing a curl on a URL performs a GET request. <pre><code>sld curl base:/\n</code></pre></p> <p>The next command we have seen before is the <code>ls</code> command.  It outputs a listing of the targeted container, and can be  made to include access control and metadata resources present in the container as well. <pre><code>sld ls -la base:/\n</code></pre></p> <p>The <code>tree</code> command allows us to create a directory tree  starting from the targeted container.  <pre><code>sld tree base:/\n</code></pre></p> <p>The <code>cp</code> command allows the copying of resources on the same pod, between pods, or from and to the local file system. It per default  is fully recursive, and will copy the whole underlying resource tree to the target destination. <pre><code>sld cp /path/to/img.png base:/images/img.png\n</code></pre></p> <p>The <code>mv</code> command is similar to the copy command, but it removes the  source resources after the move (except for when moving from the local file system). <pre><code>sld mv base:/images/img.png base:/photos/.\n</code></pre></p> <p>The <code>rm</code> command can be used to remove resources and containers from  a Solid pod. It requires an explicit flag to work recursive. <pre><code>sld rm -r base:/photos/\n</code></pre></p> <p>The <code>mkdir</code> command creates an empty container on a Solid pod. <pre><code>sld mkdir base:/documents/\n</code></pre></p> <p>The <code>touch</code> command creates an empty resource <pre><code>sld touch base:/documents/work/file.txt\n</code></pre></p> <p>The <code>find</code> command searches all resources in the given container and its sub-containers for a name match. <pre><code>sld find base:/ file.txt\n</code></pre></p> <p>The <code>find</code> command evaluates a query over all resources in the given container and its sub-containers individually. The <code>--federated</code> flag can be used to evaluate the query over the combined knowledge graph of all found resources. <pre><code>sld query --all base:/ \"Select ?person where { ?person &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://xmlns.com/foaf/0.1/Person&gt; . }\" \n</code></pre></p> <p>The <code>edit</code> command opens a remote resource in a local editor. It copies the resource to a temporary file,  after which changes can be committed to this file. Upon pressing a button in the Bashlib program, this  temporary file is synced again with the remote resource. <pre><code>sld edit base:/documents/work/file.txt\n</code></pre></p>"},{"location":"tutorial/#setting-up-a-profile-image-on-your-pod","title":"Setting up a profile image on your pod","text":"<p>Let's end with a concrete task, setting a profile picture. We choose our profile picture located at <code>~/Pictures/my_nice_picture.png</code>.</p> <p>To start, we copy the image to our pod at the location <code>base:/profile/img.png</code> using the following command: <pre><code>sld cp ~/Pictures/my_nice_picture.png base:/profile/img.png\n</code></pre></p> <p>As profile pictures need to be publicly readable, so everyone can see your profile picture, we set public read permissions for this resource. <pre><code>sld access set base:/profile/img.png p=r\n</code></pre></p> <p>With our image uploaded to our pod and made public,  we will now have to edit our profile document to link the new profile image to our WebID (use the <code>--editor</code> option to choose an alternative editor) <pre><code>sld edit webId:\n</code></pre> This will open our profile document in our default editor (or our editor of choice). We now add the following line to the document (replace <code>imageurl</code> with the url of the newly uploaded image): <pre><code>&lt;http://localhost:3000/mydatapod/profile/card#me&gt; &lt;http://xmlns.com/foaf/0.1/img&gt; &lt;http://localhost:3000/mydatapod/profile/img.png&gt; .\n</code></pre></p> <p>Now save the document, and exit the editor. Press on any key to continue, and your profile document is now updated with a link to your newly added profile image </p> <p>Congratulations, you just set your profile image!</p> <p>If you were using a web-hosted Solid pod, you should be able to see your result when looking at your profile  here. For locally hosted pods however, most likely your browser will stop you from looking at localhost links because of CORS errors.</p>"},{"location":"contributing/making-changes/","title":"Pull Requests","text":""},{"location":"documentation/overview/","title":"Documentation Overview","text":"<p>The Bashlib command line interface provides straightforward commands to interact with your Solid pod.  It can be useful both for personal use, setting up small workflows or quick demonstrations of proof of concepts. The authentication options enable quick switching between WebIDs and Solid Pods.  As not everything is optimized for performance, operations that target many resources or few but large resources  may not be performant enough for some use-cases, as the internal resource management does not make use of streaming.</p> <p> To login and manage authentication info for Bashlib, navigate to the authentication management section.  For an overview of the available commands, their options and code example, navigate to the available commands section.  To view and manage access to resources, navigate to the access management section.  To see how to use aliases to speed up your flow, navigate to the using aliases section.</p>"},{"location":"documentation/cli/access/","title":"Access Management","text":"<p>The <code>access</code> command is used to manage access of resources on a Solid pod. Solid has two competing authorization proposals, Web Access Controls that use <code>.acl</code> resources,  and Access Control Policies that use <code>.acp</code> resources.</p> <p>Bashlib implements full support for the management of WAC resources, and partial support for the management of ACP resources using the Inrupt universalAccess libraries.  The access command has thee subcommands: <code>list</code>, <code>set</code> and <code>delete</code></p>"},{"location":"documentation/cli/access/#list","title":"List","text":"<p>The <code>list</code> subcommand provides a listing of all access information for the targeted (container) resource.</p>"},{"location":"documentation/cli/access/#arguments","title":"arguments","text":"<p><pre><code>Arguments:\n  url            Resource URL\n</code></pre> The <code>url</code> argument is the target (container) resource for which access is to be listed.</p>"},{"location":"documentation/cli/access/#options","title":"options","text":"<p><pre><code>Options:\n  --acl          Displays ACL specific information such as group and default access\n  -p, --pretty   Pretty format\n  -v, --verbose  Log all operations\n</code></pre> The <code>--acl</code> option displays information specific to <code>.acl</code> resources,  such as <code>default</code> access indicating that the authorization is also enforced on child resources without their own <code>.acl</code> file or <code>inhereted</code> access indicating that the access rules are derived from the default access of a parent resource.  The <code>--pretty</code> option outputs the information in a table format  The <code>--verbose</code> option outputs operation logs.</p>"},{"location":"documentation/cli/access/#examples","title":"examples","text":"<p>List the pod root access in a pretty format <pre><code>sld access list --pretty https://mypod.org/\n</code></pre></p>"},{"location":"documentation/cli/access/#set","title":"Set","text":"<p>The <code>set</code> subcommand is used to edit resource access.</p>"},{"location":"documentation/cli/access/#arguments_1","title":"arguments","text":"<p><pre><code>Arguments:\n  url            Resource URL\n  permissions    Permission format when setting permissions. \n        Format according to id=[a][c][r][w]. \n        For public permissions please set id to \"p\". \n        For the current authenticated user please set id to \"u\".\n        For specific agents, set id to be the agent webid.\n</code></pre> The <code>url</code> argument is the target (container) resource for editing access rules.  The <code>permissions</code> argument is a formatted string containing the identifier for which rules are defined, and the associated permissions that are to be set for the given identifier. Using <code>p</code> as the identifier targets public permissions and using <code>u</code> as the identifier targets the current WebID of the authenticated Bashlib session.  The <code>a</code> is append rights, allowing PATCH operations to be made.  The <code>c</code> is control rights, allowing the editing of access controls for a resource (for ACP this includes both readControl and writeControl)  The <code>r</code> is read rights, allowing a GET request to a resource.  The <code>p</code> is write rights. For a resource this allows it to be overwritten using a PUT request.  For a container this allows resources to be added using both PUT and POST requests.</p>"},{"location":"documentation/cli/access/#options_1","title":"options","text":"<p><pre><code>Options:\n  --acl          Enables ACL specific operations --default and --group\n  --default      Set the defined permissions as default (only in --acl mode)\n  --group        Process identifier as a group identifier (only in --acl mode)\n  -v, --verbose  Log all operations\n  -h, --help     display help for command\n</code></pre> The <code>--acl</code> option enables the default and group flags to be used, which are WAC specific operations.  The <code>--default</code> option makes the current access rules default for all children resources when defined on a container. Only available in <code>--acl</code> mode.  The <code>--group</code> option indicates that the identifier represents a group identifier. Only available in <code>--acl</code> mode.  The <code>--verbose</code> option outputs operation logs.</p>"},{"location":"documentation/cli/access/#examples_1","title":"examples","text":"<p>Setting public read permissions for a resource <pre><code>sld access set https://mypod.org/resource p=r\n</code></pre></p> <p>Giving access to alice to write to a container <pre><code>sld access set http://mypod.org/container/ http://people.org/alice/webid=w\n</code></pre></p>"},{"location":"documentation/cli/access/#delete","title":"Delete","text":"<p>The <code>delete</code> subcommand is only available for WAC based pods using <code>.acl</code> resources. Note that removing a resource using the <code>rm</code> command also removes the associated <code>.acl</code> resource on the CSS automatically.</p>"},{"location":"documentation/cli/access/#arguments_2","title":"arguments","text":"<p><pre><code>Arguments:\n  url            Resource URL\n</code></pre> The <code>url</code> argument is the target <code>.acl</code> resource that will be deleted.</p>"},{"location":"documentation/cli/access/#options_2","title":"options","text":"<p><pre><code>Options:\n  -v, --verbose  Log all operations\n</code></pre> The <code>--verbose</code> option output operation logs.</p>"},{"location":"documentation/cli/access/#example","title":"example","text":"<p>Removing an acl resource. <pre><code>sld access remove https://mypod.org/resource.acl\n</code></pre></p>"},{"location":"documentation/cli/access/#examples_2","title":"examples","text":""},{"location":"documentation/cli/aliases/","title":"Using aliases","text":"<p>The current implementation of using aliases is weak, and may be changed in subsequent releases. Alias management is a potential future addition.</p>"},{"location":"documentation/cli/aliases/#base","title":"Base","text":"<p>The <code>base:</code> alias indicates the root of your Solid pod. Executing a command using this alias will target the root of your pod, if it is known. This value is taken from the <code>pim:storage</code> triple in the WebID. In case multiple storage locations are available, results in using this may be inconsistent.  The following command wil make a listing of the root of the Solid pod of the current user. <pre><code>sld ls base:/\n</code></pre></p>"},{"location":"documentation/cli/aliases/#webid","title":"WebID","text":"<p>The <code>webid:</code> alias will target the user WebID.  The following command wil retrieve the user WebID. <pre><code>sld curl webid:\n</code></pre></p>"},{"location":"documentation/cli/aliases/#inbox","title":"Inbox","text":"<p>The <code>inbox:</code> alias targets the user inbox, if known. This value is taken from the <code>ldp:inbox</code> triple in the WebID.  The following command queries the inbox for events <pre><code>sld query inbox:/ \"Select ?event where { ?event a &lt;http://example.org/Event&gt; }\n</code></pre></p>"},{"location":"documentation/cli/authentication/","title":"Authentication Management","text":"<p>The Bashlib CLI interface provides multiple options for authentication management. It enables interactive login flows using the browser, that work with any Solid pod server. Additionally, it includes the client credentials flow to generate authentication tokens without needing a browser login both for the Community Solid Server v7 and the Enterprise Solid Server from Inrupt.</p> <p> All examples make use of the abstraction <code>sld</code> as an alias for <code>node bin/solid.js</code>, </p>"},{"location":"documentation/cli/authentication/#enforcing-specific-authorization-flows","title":"Enforcing specific authorization flows","text":"<p>When setting up test flows on Solid, it might be interesting to force a specific authentication flows to be used. For this, the <code>--auth</code> option can be set on the bashlib program as such:] <pre><code>sld --auth interactive\n</code></pre> This examples forces authentication via an interactive browser session. Other options are <code>token</code> for only token based authentication, <code>none</code> for no authentication and <code>request</code> to dynamically choose an authentication option during use, which is the default. The <code>--port</code> option can be changed to change the port of the local service that is setup to manage interactive authentication flows with the browser.</p>"},{"location":"documentation/cli/authentication/#auth-command","title":"Auth command","text":"<p>The <code>auth</code> command contains all functionality to manage authentication options and create client credentials tokens.</p>"},{"location":"documentation/cli/authentication/#set","title":"Set","text":"<p>The <code>set</code> subcommand is used to manage the authentication session for Bashlib. It provides the ability to set a specific WebID as an argument, or if no argument is given starts an interactive selection dialog to change the active WebID.</p>"},{"location":"documentation/cli/authentication/#arguments","title":"arguments","text":"<p><pre><code>Arguments:\n  webid       Set active WebID directly, without requiring manual selection.\n</code></pre> The <code>webid</code> argument directly sets the session to the provided WebID value.</p>"},{"location":"documentation/cli/authentication/#examples","title":"examples","text":"<p>Interactive session management <pre><code>sld auth set\n</code></pre></p> <p>Setting a specific active WebID <pre><code>sld auth set https://people.org/alice/webid\n</code></pre></p>"},{"location":"documentation/cli/authentication/#show","title":"Show","text":"<p>The <code>show</code> subcommand shows the current authentication session. It shows the WebId, if there is an active authentication session and if a client credential token is available.</p>"},{"location":"documentation/cli/authentication/#options","title":"options","text":"<p><pre><code>Options:\n  -p, --pretty  Show listing in table format.\n</code></pre> The <code>--pretty</code> option displays the result in a table formate.</p>"},{"location":"documentation/cli/authentication/#examples_1","title":"examples","text":"<pre><code>sld auth show\n</code></pre>"},{"location":"documentation/cli/authentication/#clear","title":"Clear","text":"<p>The <code>clear</code> subcommand clears the current authentication session and active WebID. It does not remove any stored authentication information.</p>"},{"location":"documentation/cli/authentication/#examples_2","title":"examples","text":"<pre><code>sld auth clear\n</code></pre>"},{"location":"documentation/cli/authentication/#list","title":"List","text":"<p>The <code>list</code> subcommand lists the stored authentication information. It shows the WebIds, if there is an active authentication session and if a client credential token is available.</p>"},{"location":"documentation/cli/authentication/#options_1","title":"options","text":"<p><pre><code>Options:\n  -p, --pretty  Show listing in table format.\n</code></pre> The <code>--pretty</code> option displays the result in a table formate.</p>"},{"location":"documentation/cli/authentication/#examples_3","title":"examples","text":"<pre><code>sld auth list\n</code></pre>"},{"location":"documentation/cli/authentication/#remove","title":"Remove","text":"<p>The <code>remove</code> subcommand provides the ability to remove authentication information from Bashlib. It provides an interactive menu if no argument is given, or can remove information for specific WebIDs or all information directly via the CLI arguments.</p>"},{"location":"documentation/cli/authentication/#arguments_1","title":"arguments","text":"<p><pre><code>Arguments:\n  string      webid | all\n</code></pre> The command has an optional parameter.  When passing the argument string <code>all</code>, all authentication information is removed. Passing a specific WebID removes all authentication information tied to that WebID. If no argument is passed, an interactive CLI menu is provided.</p>"},{"location":"documentation/cli/authentication/#examples_4","title":"examples","text":"<p>Opening the interactive menu <pre><code>sld auth remove\n</code></pre></p> <p>Removing all authentication information <pre><code>sld auth remove all\n</code></pre></p> <p>Removing a specific WebID <pre><code>sld auth remove https://people.org/alice/webid\n</code></pre></p>"},{"location":"documentation/cli/authentication/#create-token-css","title":"Create Token (CSS)","text":"<p>The token creation is divided in two subcommands,  one for the Community Solid Server and one for the Inrupt Enterprise Solid Server, as both have a different approach to token generation for client applications.</p> <p>The <code>create-token-css</code> command creates a client credentials token for pods hosted on a Community Solid Server version 7. The authentication options can be passed both as command line arguments, or in an interactive dialog if they are not provided through the CLI options. The interactive creation menu will ask to use the WebID of the current session to create a token when available.</p>"},{"location":"documentation/cli/authentication/#options_2","title":"options","text":"<p><pre><code>Options:\n  -w, --webid &lt;string&gt;     User WebID\n  -n, --name &lt;string&gt;      Token name\n  -e, --email &lt;string&gt;     User email\n  -p, --password &lt;string&gt;  User password\n  -v, --verbose            Log actions\n  -h, --help               display help for command\n</code></pre> The <code>--webid</code> option is the WebID for which the token is created.  The <code>--name</code> option is the name of the token (only important for token management).  The <code>--email</code> option is the email that was used to create the account tied to the WebID.  The <code>--password</code> option is the password tied to the account.  the <code>--verbose</code> option outputs operation logs.</p>"},{"location":"documentation/cli/authentication/#examples_5","title":"examples","text":"<p>Open interactive dialog to create token <pre><code>sld auth create-token-css\n</code></pre></p>"},{"location":"documentation/cli/authentication/#create-token-ess","title":"Create Token (ESS)","text":"<p>The <code>create-token-ess</code> command creates a client credentials token for pods hosted on an Inrupt Enterprise Solid Server. The authentication options can be passed both as command line arguments, or in an interactive dialog if they are not provided through the CLI options. The interactive creation menu will ask to use the WebID of the current session to create a token when available.  The Inrupt token generation relies on the registration of applications via their  application registration service. After registering Bashlib, an <code>id</code> and <code>secret</code> value will be shown. These values need to be provided to this command to be able to automatically create authenticated sessions without needing interactive login.</p>"},{"location":"documentation/cli/authentication/#options_3","title":"options","text":"<p><pre><code>Options:\n  -w, --webid &lt;string&gt;     User WebID\n  -i, --id &lt;string&gt;        application registration id\n  -s, --secret &lt;string&gt;    application registration secret\n  -v, --verbose            Log actions\n  -h, --help               display help for command\n</code></pre> The <code>--webid</code> option is the WebID for which the token is created.  The <code>--id</code> option is the <code>id</code> value retrieved from the registration flow described above.  The <code>--secret</code> option is the <code>secret</code> value retrieved from the registration flow described above.  the <code>--verbose</code> option outputs operation logs.</p>"},{"location":"documentation/cli/authentication/#examples_6","title":"examples","text":"<p>Open interactive dialog to create token <pre><code>sld auth create-token-ess\n</code></pre></p>"},{"location":"documentation/cli/commands/","title":"Commands","text":"<p>Bashlib provides a set of commands to manage resources and containers on your Solid pod. All examples make use of the abstraction <code>sld</code> as an alias for <code>node bin/solid.js</code>,  and for all example we expect the user to be authenticated as documented in the Authentication section.</p>"},{"location":"documentation/cli/commands/#curl","title":"Curl","text":"<p>The <code>curl</code> command wraps the internal authenticated <code>fetch</code> function with functionality that mimics the curl command found on most linux shells.</p>"},{"location":"documentation/cli/commands/#arguments","title":"arguments","text":"<p><pre><code>Arguments:\n  url                    file to be fetched\n</code></pre> The <code>url</code> argument for this command is the URL of the resource that is the target of the curl command.</p>"},{"location":"documentation/cli/commands/#options","title":"options","text":"<p><pre><code>Options:\n  -v, --verbose          Write out full response and all headers\n  -H, --only-headers     Only write out headers\n  -m, --method &lt;string&gt;  GET, POST, PUT, DELETE, ...\n  -b, --body &lt;string&gt;    The request body\n  -F, --file &lt;string&gt;    File containing the request body. Ignored when the --body flag is set.\n  -h, --header &lt;string&gt;  The request header. Multiple headers can be added separately. e.g. -h \"Accept: application/json\" -h \"...\"\n</code></pre> The <code>--verbose</code> option writes out all response headers for a request.  The <code>--only-headers</code> option only writes out response headers and ignores the response body.  The <code>--method</code> option sets the HTTP request method.  The <code>--body</code> option sets the HTTP request body.  The <code>--file</code> option allows passing the file contents as the body of the request.   The <code>--header</code> option allows the setting of a request header. Setting multiple headers requires multiple <code>--header</code> options to be set.</p>"},{"location":"documentation/cli/commands/#examples","title":"examples","text":"<p>A simple fetch request to a resource requesting a JSON-LD format <pre><code>sld curl https://mypod.org/resource --header \"Accept: application/ld+json\"\n</code></pre></p> <p>A POST request using a file contents as request body <pre><code>sld curl -m POST -f /path/to/file https://mypod.org/resource\n</code></pre></p>"},{"location":"documentation/cli/commands/#list","title":"List","text":"<p>The <code>ls</code> command provides the listing of a container on a Solid pod.</p>"},{"location":"documentation/cli/commands/#arguments_1","title":"arguments","text":"<p><pre><code>Arguments:\n  url            URL of container to be listed\n</code></pre> The <code>url</code> argument for this command is the URL of the container for which a listing is to be made.  This will only work if the url targets a container. It is important to add the trailing slash of the container URL!</p>"},{"location":"documentation/cli/commands/#options_1","title":"options","text":"<p><pre><code>Options:\n  -a, --all      List all files including acl files\n  -f, --full     List files with their full uri\n  -l, --long     List in long format\n  -v, --verbose  \n</code></pre> The <code>--all</code> option includes <code>.meta</code>, <code>.acl</code> and <code>.acp</code>  files in the listing.  The <code>--full</code> option writes full resource URIs, not only the resource name.  The <code>--long</code> option writes the listing in a table format, including available information about size, latest modification, related metadata resource and related acl resource.  The <code>--verbose</code> option shows warnings.</p>"},{"location":"documentation/cli/commands/#examples_1","title":"examples","text":"<p>A listing of a container <pre><code>sld ls https://mypod.org/container/\n</code></pre></p> <p>A listing of a container showing all resources in a long format <pre><code>sld ls --long --all https://mypod.org/container/\n</code></pre></p>"},{"location":"documentation/cli/commands/#copy","title":"Copy","text":"<p>The <code>cp</code> command can copy resources between Solid pod locations, across Solid pods, or between the local file system and a Solid pod. If the source location is a container or directory, it will recursively copy the container and all sub-containers recursively copying the whole underlying resource tree, including empty containers.</p> <p>The default copying behavior ignores <code>.meta</code>, <code>.acl</code> and <code>.acp</code> resources, which can be changed using the <code>--all</code> flag. The copy command automatically copies the full recursive resource tree. At the moment this behavior cannot be altered. In terms of overriding resources, the default setting is that every time a resource is found to already exist, an interactive prompt is shown. This behavior can be altered either by the <code>--never-override</code> or the <code>--override</code> options.</p>"},{"location":"documentation/cli/commands/#arguments_2","title":"arguments","text":"<p><pre><code>Arguments:\n  src                   resource or container to be copied\n  dst                   destination to copy file or directory to\n</code></pre> The <code>src</code> argument is the location of the resource or container to be moved. If the URL starts with <code>http(s)://</code>, the resource is assumed to be a remote resource, if not the resource is assumed to be local and matched with the local file system. The <code>dst</code> argument is the destination to which the source resource is to be copied. Similarly it uses the <code>http(s)://</code> prefix to decide if the location is local or remote. The default behavior ignores context resources such as <code>.meta</code>, <code>.acl</code> and <code>.acp</code> present in the directories. The <code>--all</code> flag ignores this behavior, though note that for authorization resources, as the target URIs are not edited, copying resources with these authorization resources does not imply they will result in the same access controls as the location they were copied from!</p>"},{"location":"documentation/cli/commands/#options_2","title":"options","text":"<p><pre><code>Options:\n  -a, --all             Copy .acl files in recursive directory copies\n  -o, --override        Automatically override existing files\n  -n, --never-override  Automatically override existing files\n  -v, --verbose         Log all read and write operations\n</code></pre> The <code>--all</code> option includes <code>.meta</code>, <code>.acl</code> and <code>.acp</code> files in the listing.  The <code>--override</code> option automatically overrides existing resources.  The <code>--never-override</code> option automatically mitigates resource overrides.  The <code>--verbose</code> option shows warnings.</p>"},{"location":"documentation/cli/commands/#examples_2","title":"examples","text":"<p>Copying a local resource into a Solid pod container. <pre><code>sld cp /path/to/file https://mypod.org/container/\n</code></pre></p> <p>Copying a local resource to a specific remote resource <pre><code>sld cp /path/to/file.ttl https://mypod.org/container/resource.ttl\n</code></pre></p> <p>Copy the contents of container 1 of alice's pod to container 2 of bob's pod.</p> <pre><code>sld cp https://mypod.org/alice/container1/. https://mypod.org/bob/container2/\n</code></pre> <p>Copy the source container into the target container: <code>https://mypod.org/bob/container2/container1/</code>. <pre><code>sld cp https://mypod.org/alice/container1/ https://mypod.org/bob/container2/\n</code></pre></p> <p>Copy a resource from a solid pod to the local filesystem <pre><code>sld cp https://mypod.org/container/resource.ttl ./resource.ttl\n</code></pre></p>"},{"location":"documentation/cli/commands/#move","title":"Move","text":"<p>The <code>mv</code> command moves resources between Solid pod locations, across Solid pods, or between the local file system and a Solid pod. If the source location is a container or directory, it will recursively move the container and all sub-containers recursively copying the whole underlying resource tree, including empty containers. When moving from the local file system, files will not be deleted!</p> <p>The default copying behavior ignores <code>.meta</code>, <code>.acl</code> and <code>.acp</code> resources, which can be changed using the <code>--all</code> flag. The move command automatically moves the full recursive resource tree. At the moment this behavior cannot be altered. In terms of overriding resources, the default setting is that every time a resource is found to already exist, an interactive prompt is shown. This behavior can be altered either by the <code>--never-override</code> or the <code>--override</code> options.</p>"},{"location":"documentation/cli/commands/#arguments_3","title":"arguments","text":"<p><pre><code>Arguments:\n  src                   resource or container to be moved\n  dst                   destination of the move\n</code></pre> The <code>src</code> argument is the location of the resource or container to be moved. If the URL starts with <code>http(s)://</code>, the resource is assumed to be a remote resource, if not the resource is assumed to be local and matched with the local file system. The <code>dst</code> argument is the destination to which the source resource is to be copied. Similarly it uses the <code>http(s)://</code> prefix to decide if the location is local or remote. The default behavior ignores context resources such as <code>.meta</code>, <code>.acl</code> and <code>.acp</code> present in the directories. The <code>--all</code> flag ignores this behavior, though note that for authorization resources, as the target URIs are not edited, copying resources with these authorization resources does not imply they will result in the same access controls as the location they were copied from!</p>"},{"location":"documentation/cli/commands/#options_3","title":"options","text":"<p><pre><code>Options:\n  -a, --all             Copy .acl files in recursive directory copies\n  -o, --override        Automatically override existing files\n  -n, --never-override  Automatically override existing files\n  -v, --verbose         Log all read and write operations\n</code></pre> The <code>--all</code> option includes <code>.meta</code>, <code>.acl</code> and <code>.acp</code> files in the listing.  The <code>--override</code> option automatically overrides existing resources.  The <code>--never-override</code> option automatically mitigates resource overrides.  The <code>--verbose</code> option shows warnings.</p>"},{"location":"documentation/cli/commands/#examples_3","title":"examples","text":"<p>Moving a local resource into a Solid pod container. This does not remove the local resource! <pre><code>sld mv /path/to/file https://mypod.org/container/\n</code></pre></p> <p>Moving a local resource to a specific remote resource. This does not remove the local resource! <pre><code>sld mv /path/to/file.ttl https://mypod.org/container/resource.ttl\n</code></pre></p> <p>Move the contents of container1 into container2. This removes container 1.</p> <pre><code>sld cp https://mypod.org/alice/container1/. https://mypod.org/bob/container2/\n</code></pre> <p>Move the source container into the target container. <pre><code>sld cp https://mypod.org/alice/container1/ https://mypod.org/bob/container2/container1/\n</code></pre></p> <p>Move a resource from a solid pod to the local filesystem <pre><code>sld cp https://mypod.org/container/resource.ttl ./resource.ttl\n</code></pre></p>"},{"location":"documentation/cli/commands/#remove","title":"Remove","text":"<p>The <code>rm</code> command can remove resources and/or directories from a remote Solid pod.</p>"},{"location":"documentation/cli/commands/#arguments_4","title":"arguments","text":"<p><pre><code>Arguments:\n  urls             URL of container to be listed\n</code></pre> The <code>urls</code> parameter accepts a sequence of urls that need to be removed.</p>"},{"location":"documentation/cli/commands/#options_4","title":"options","text":"<p><pre><code>Options:\n  -r, --recursive  Recursively removes all files in given container (.acl files are removed on resource removal)\n  -v, --verbose    Log all operations\n</code></pre> The <code>--recursive</code> flag must be set when removing container resources. This automatically also removes any contained <code>.acl</code>, <code>.acp</code> and <code>.meta</code> resources.   The <code>--verbose</code> flag outputs operation logs.</p>"},{"location":"documentation/cli/commands/#examples_4","title":"examples","text":"<p>Remove two resources <pre><code>sld rm https://mypod.org/resource1 https://mypod.org/resource2\n</code></pre></p> <p>Remove a container <pre><code>sld rm https://mypod.org/container/\n</code></pre></p>"},{"location":"documentation/cli/commands/#mkdir","title":"Mkdir","text":"<p>The <code>mkdir</code> command creates a new container on a remote Solid pod. The command automatically creates all parent directories that do not exist when specifying a subdirectory to create,  and fails if the target container already exists.</p>"},{"location":"documentation/cli/commands/#arguments_5","title":"arguments","text":"<p><pre><code>Arguments:\n  url            Container to start the search\n</code></pre> The <code>url</code> argument is the target container to be created.</p>"},{"location":"documentation/cli/commands/#options_5","title":"options","text":"<p><pre><code>Options:\n  -v, --verbose  Log all operations\n</code></pre> The <code>--verbose</code> flag outputs operation logs.</p>"},{"location":"documentation/cli/commands/#examples_5","title":"examples","text":"<p>Create a new container <pre><code>sld mkdir https://mypod.org/container/\n</code></pre></p>"},{"location":"documentation/cli/commands/#touch","title":"Touch","text":"<p>The <code>touch</code> command creates an empty resource at the target location. This cannot create containers, for this use the <code>mkdir</code> command. The content type of the created resource is derived from the content type flag or if that is missing from the file extension.  If neither can be found an error is thrown.</p>"},{"location":"documentation/cli/commands/#arguments_6","title":"arguments","text":"<p><pre><code>Arguments:\n  url                          resource to be created\n</code></pre> The <code>url</code> argument is the target resource that is to be created.</p>"},{"location":"documentation/cli/commands/#options_6","title":"options","text":"<p><pre><code>Options:\n  -c, --content-type &lt;string&gt;  Content type of the created resource\n  -v, --verbose                Log all operations\n</code></pre> the <code>--content-type</code> flag provides  The <code>--verbose</code> flag outputs operation logs.</p>"},{"location":"documentation/cli/commands/#examples_6","title":"examples","text":"<p>Create a new resource <pre><code>sld touch --content-type text/turtle https://mypod.org/container/resource\n</code></pre></p>"},{"location":"documentation/cli/commands/#tree","title":"Tree","text":"<p>The <code>tree</code> command provides a tree-structured listing of the target container and all its subcontainers.</p>"},{"location":"documentation/cli/commands/#arguments_7","title":"arguments","text":"<p><pre><code>Arguments:\n  url            Base container to construct tree over\n</code></pre> The <code>url</code> argument is the target container for which the tree listing is to be made.</p>"},{"location":"documentation/cli/commands/#options_7","title":"options","text":"<p><pre><code>Options:\n  -a, --all      Display .acl, .acp and .meta resources\n  -f, --full     Display full resource URIs\n  -v, --verbose  Log all operations\n</code></pre> The <code>--all</code> flag includes the <code>.acl</code>, <code>.acp</code> and <code>.meta</code> context resources in the command output.  The <code>--full</code> flag displays the resulting resources using their full URIs  The <code>--verbose</code> flag outputs operation logs.</p>"},{"location":"documentation/cli/commands/#examples_7","title":"examples","text":"<p>Create tree listing on the root of a Solid pod. <pre><code>sld tree https://mypod.org/\n</code></pre></p>"},{"location":"documentation/cli/commands/#find","title":"Find","text":"<p>The <code>find</code> command can be used to find resources based on their name.</p>"},{"location":"documentation/cli/commands/#arguments_8","title":"arguments","text":"<p><pre><code>Arguments:\n  url            Container to start the search\n  filename       Filename to match, processed as RegExp(filename)\n</code></pre> The <code>url</code> parameter is the container that forms the root of the resource tree in which the search is executed. The <code>filename</code> parameter is the filename to match, processed as a javascript RegExp.</p>"},{"location":"documentation/cli/commands/#options_8","title":"options","text":"<p><pre><code>Options:\n  -a, --all      Match .acl, .acp and .meta files\n  -f, --full     Match full filename.\n  -v, --verbose  Log all operations\n</code></pre> The <code>--all</code> flag also matches access control and metadata files.  The <code>--full</code> flag matches on and returns the full URIs of resources.  The <code>--verbose</code> flag outputs operation logs.</p>"},{"location":"documentation/cli/commands/#examples_8","title":"examples","text":"<p>Find a resource named <code>card</code> in the <code>profile/</code> container. <pre><code>sld find http://mypod.org/profile/ card\n</code></pre></p>"},{"location":"documentation/cli/commands/#query","title":"Query","text":"<p>The <code>query</code> command executes a SPARQL query over a target resource or container. In case a container is queried, all contained resources and subcontainers are recursively queried as well. The query itself is not federated, each query is individually evaluated over every resource. The following resources are included when querying: <code>.ttl, .trig .nt, .nq, .jsonld, .rdf</code> both on their resource extensions and their content type.. The Comunica engine is used for query evaluation. Note that only SELECT queries are supported!</p>"},{"location":"documentation/cli/commands/#arguments_9","title":"arguments","text":"<p><pre><code>Arguments:\n  url              Resource to query. In case of container recursively queries all contained files.\n  query            SPARQL query string | file path containing SPARQL query when -q flag is active\n</code></pre> The <code>url</code> argument is the target resource or container to query. Containers are queried recursively on all contained resources in its resource tree. The <code>query</code> argument is either a SPARQL query in quotes, or the path to a file containing a sparql query if the <code>--queryfile</code> flag has been set.</p>"},{"location":"documentation/cli/commands/#options_9","title":"options","text":"<p><pre><code>Options:\n  -a, --all        Match .acl and .meta files\n  -q, --queryfile  Process query parameter as file path of SPARQL query\n  -p, --pretty     Pretty format\n  -f, --full       Return containing files using full filename.\n  -v, --verbose    Log all operations\n</code></pre> The <code>--all</code> flag includes <code>.acl</code>, <code>.acp</code> and <code>.meta</code> resources in the query targets.  The <code>--queryfile</code> flag changes the <code>query</code> argument to a file path for a resource containing a SPARQL query.  The <code>--pretty</code> flag outputs the results in a table.  The <code>--full</code> flag gives the full resource URIs of where the matches were found.  The <code>--verbose</code> outputs operation logs.</p>"},{"location":"documentation/cli/commands/#examples_9","title":"examples","text":"<p>Evaluating a federated query over all resources in the profile container to look for entites with a given name. <pre><code>sld query https://mypod.org/profile/ \"select ?entity ?name where { ?entity foaf:name ?name }\" --federated \n</code></pre></p> <p>Evaluating a query stored in a local resource over the resources in the profile container individually, including <code>.acl</code>, <code>.acp</code> and <code>.meta</code> resources. <pre><code>sld query --queryfile https://mypod.org/profile/ /path/to/sparql_query_file --all\n</code></pre></p>"},{"location":"documentation/cli/commands/#edit","title":"Edit","text":"<p>The <code>edit</code> command enables the editing of remote resources using a local editor. The command will remain in standby until changes are saved, after which pressing a button in the shell will upload the resource to the Solid pod.</p> <p> Note: there currently is still a bug for longer edits, where saving the changes when a client session has expired will not be able to save the resource back to the pod. This should not be a problem when using client credentials.</p>"},{"location":"documentation/cli/commands/#arguments_10","title":"arguments","text":"<p><pre><code>Arguments:\n  url                                       Resource URL\n</code></pre> The <code>url</code> argument is target resource that will be edited.</p>"},{"location":"documentation/cli/commands/#options_10","title":"options","text":"<p><pre><code>Options:\n  -e, --editor &lt;path_to_editor_executable&gt;  Use custom editor\n  -t, --touch                               Create file if not exists\n  -v, --verbose                             Log all operations\n</code></pre> The <code>--editor</code> option enables the use of a specific local editor to modify the resource.  The <code>--touch</code> option will create the resource if it does not exist yet.  The <code>--verbose</code> option outputs operation logs.</p>"},{"location":"documentation/cli/commands/#examples_10","title":"examples","text":"<p>Editing a resource using the default editor. <pre><code>sld edit https://mypod.org/resource1\n</code></pre></p> <p>Creating and editing a resource using vs-code (code) <pre><code>sld edit --touch --editor code  https://mypod.org/non_existing_resource\n</code></pre></p>"},{"location":"documentation/cli/commands/#access","title":"Access","text":"<p>The <code>access</code> command is used to manage resource access. This is explained in the access management section.</p>"},{"location":"documentation/cli/commands/#auth","title":"Auth","text":"<p>The <code>auth</code> command is used to manage authentication in Bashlib. This is explained in the authentication management section.</p>"},{"location":"documentation/typescript/css-specific/","title":"css specific typescript","text":""},{"location":"documentation/typescript/example-requests/","title":"Example requests ts","text":""},{"location":"documentation/typescript/metadata/","title":"Handling metadata","text":""},{"location":"documentation/typescript/overview/","title":"Overview Usage for Typescript","text":""}]}