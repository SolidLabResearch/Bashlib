{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u00b6 Welcome to the Bashlib Homepage. Bashlib is a Command Line Interface for working with Solid Pods, made by Ruben Dedecker at the KNoWS team at Ghent University . An introduction to quickly setting up a Community Solid Server instance and interfacing with it using Bashlib is found in the tutorial section . Documentation on the tool and the available commands is found in the documentation section . Documentation may be incomplete in content and structure. Feel free to open a discussion and report incorrect information.","title":"Welcome"},{"location":"#welcome","text":"Welcome to the Bashlib Homepage. Bashlib is a Command Line Interface for working with Solid Pods, made by Ruben Dedecker at the KNoWS team at Ghent University . An introduction to quickly setting up a Community Solid Server instance and interfacing with it using Bashlib is found in the tutorial section . Documentation on the tool and the available commands is found in the documentation section . Documentation may be incomplete in content and structure. Feel free to open a discussion and report incorrect information.","title":"Welcome"},{"location":"tutorial/","text":"Bashlib Tutorial \u00b6 This tutorial provides a quick setup of a Community Solid Server, and some useful interactions to manage resources on a created Solid pod. Setting up a Solid Server \u00b6 To use Bashlib, we first explain how to setup your own local Solid Server on which you can create your first Solid pod. In case you already have a Solid pod, feel free to skip this section. Alteratively, you may want to create a Solid pod on one of the free Pod provider services . Note that when using a free provider, if something goes wrong you might not be able to recover your data, or that service may be relatively slow, as there are free and community hosted. Additionally, only server running the Community Solid Server or Inrupt Enterprise Solid Server versions will be able to make client credentials to authenticate automatically without needing an interactive browser session. A free CSS hosting service can be found here . A free ESS hosting service can be found here . To setup your own local Community Solid Server, we make use in this tutorial of the Community Solid Server . The full tutorial can be found here . When you are done with the tutorial, you are free to remove the current folder to delete all created files! We use NPX to setup a CSS instance, and use a file config to store all data in the data/ folder. Ideally execute the tutorial in an empty directory, so afterwards you can remove all tutorial data by removing this directory! npx @solid/community-server -c @css:config/file.json -f data/ Congratulations! Your own CSS instance is now running on localhost on port 3000! Keep this shell open during the tutorial! You can confirm this by browsing to http://localhost:3000 in the browser, and you will be greeted with a setup screen. Creating an account \u00b6 Now we will create an account and associated WebID on this local CSS instance. Navigating to http://localhost:3000 in the browser, and you will be greeted with a setup screen. Press the Sign up for an account link to create an account on this local CSS instance. As this is a local instance, the email does not really matter, as this is only used for authentication purposes and recovering a pod, but is never verified. For now, we make an example person Bob using his email bob@test.com and password bob . Next, we make a pod for this account by pressing the Create pod link! Here, we provide a pod name, for example mydatapod . Congratulations, you just created a new data pod at http://localhost:3000/mydatapod/ and associated WebID at http://localhost:3000/mydatapod/profile/card#me ! Setting up Bashlib \u00b6 With our Solid pod and WebID created, now it is time to setup Bashlib! For a quick setup, we use NPX npx solid-bashlib curl http://localhost:3000/mydatapod/profile/card#me which prompts to install bashlib, and on installation with show your WebID profile. Alternatively, a local setup can be cloned from github. git clone https://github.com/SolidLabResearch/Bashlib.git cd Bashlib npm install npm run build; node bin/solid.js curl http://localhost:3000/mydatapod/profile/card#me For the remainder of this tutorial, we will use sld as the alias for npx solid-bashlib . Managing Authentication \u00b6 As Solid aims to provide secure online data management, working with secured resources requires users to be authenticated for the system to evaluate their access. The full documentation on the authentication options for bashlib can be found in the authentication management section . Executing commands without authentication \u00b6 To run commands over public data without any authentication, we can start bashlib with the --auth flag set to none to prevent it from automatically trying to authenticate requests. We can for example make an unauthenticated request to our created WebID as follows (WebID resources are always public): sld --auth none curl --header \"Accept: application/n-triples\" http://localhost:3000/mydatapod/profile/card#me This creates unauthenticated fetch request to the WebID resource and outputs the result on the command line. As we passed a --header option that requests the result in an n-triples format, the returned data is formatted in an n-triples format. Setting a WebId and interactive authentication \u00b6 However, for most personal use resource operations will require the user to be authenticated. To start, we pass our created WebID to Bashlib. This can either be done using the interactive interface by running: sld auth set and selecting the option: Authenticate using new WebID and providing your WebID here. Alternatively, the WebID option can be provided directly in the arguments as follows: sld auth set http://localhost:3000/mydatapod/profile/card#me To see the WebID used by Bashlib to authenticate requests, we can run sld auth show --pretty which shows us that our WebID is now used by bashlib to authenticate requests. However, now we've only told Bashlib our WebID, we have not yet given it the means to authenticate a request using this WebID. There are two options for authenticating with Bashlib to be able to make authenticated requests. We can use an interactive authentication flow that uses our browser to authenticate, or we can create a credentials token that we can store which will allow us to create authenticated requests directly without needing an interactive browser session. Per default, Bashlib will use a dynamic authentication approach, where it will first look if there is an active authenticated session it can reuse. If not, it will try to create a new session using any stored credentials token. If none can be found, it will open a browser window and have the user authenticate themselves interactively using the browser. To create a listing of the profile directory of our Solid pod, run the following command: npx solid-bashlib ls base:/profile/ This base: is an alias for our pod root ( http://localhost:3000/mydatapod/ ), if it can be discovered from the user WebID. Upon running the command, a browser window will pop-up asking the user to authenticate themselves. Once logged in, looking back at the command line we see that a listing is displayed of the profile container, which is only visible to the user WebID, so the authentication was successful. Additionally, running the listing command again, we see that no authentication is required, as Bashlib stored the previous session, and reuses this session to authenticate subsequent requests made for the same WebID. npx solid-bashlib ls base:/profile --pretty Looking at the current authentication status sld auth show --pretty we see that an active session is available now. Creating a credentials token to automate authentication \u00b6 However, having to authenticate interactions can be an overhead, especially if commands are to be executed automatically from a script. To automate the authentication flow, we need to make a token that will allow us to do an authentication flow that does not require a browser window. Currently the generation of credential tokens that can directly authenticate a user session is only provided by the Community Solid Server and the Enterprise Solid Server. Both implementations differ however. In this section we only address the creation of a token for the Community Solid Server. If you have a pod on an Enterprise Solid Server, you can follow the documentation for ESS token creation in the authentication section . To create the credentials token for our current WebID in Bashlib, we execute the following command: sld auth create-token-css This will prompt us on if the token we want to create is for our currently logged in user. Press y to continue. Now we are prompted for our email (bob@test.com) and password (bob). To confirm the generation of our token, we run the show command again, which now indicates we have an auth token present. npx solid-bashlib auth show --pretty From now on, after session expiration, new sessions will be automatically generated through this token without going through an interactive browser session. All authentication information is stored per default at ~/.solid/ Managing authorization \u00b6 Now that we have an authorized user, we can manage the authorization rules for the resources on our Solid pod. Note that Solid has two competing authorization systems. The Web Access Controls specification that uses .acl resources to manage resource access, and the Access Control Protocol that uses .acp resources to manage resource access. Bashlib implements two different access management regimes: It fully implements the WAC suite for listing and editing permissions and removing permission resources, and it implements the universal access suite that can work with both WAC and ACP access management systems. However this universal system is less expressive in its functionality. Bashlib will automatically detect the used access control mechanism, but enables additional functionality when working with pods hosted on a WAC-based Solid Server such as access propagation and identity groups. Listing authorization \u00b6 To list the permissions set on the root of our pod, run: sld access list --pretty base:/ We see that our WebID has full permissions to read, write, append and control resources on our pod (deleting a resource requires write permissions). We also notice public read permissions on our root container, which we will change in the next section. If our pod is hosted on a WAC-based Solid Server (such as the Community Solid Server we setup above), we see the WebID permissions on our root are set as default , meaning they are enforced on all sub-containers and resources of this root container unless otherwise specified by these sub-containers or resources. Additionally, the inherited field shows if this authorization state is defined by an .acl file tied directly to the resource itself (in that case the value is no), or if it was derived of a default permissions set by one of the resource parents (in that case the value is yes). Editing authorization \u00b6 As shown above, currently our pod root container is set to be publicly readable. To change these permissions, we set the public access rights to our root container to be nothing. When interacting pods hosted on a WAC-based Solid Server, we can use the --default flag to make these access rules the default, however as the default access defined by the system is no access, this makes no real difference in this case. To do this, we run the following command: sld access set base:/ p= The base:/ value targets our pod root container. The p value sets the access target as public , and the empty space after the = symbol indicates that the permissions given to the public are none. We confirm this by listing the permissions again: sld access list --pretty base:/ showing public read permissions are not set anymore. Additionally, we see that a resource request to the full URI gives us a 401 Unauthenticated response. sld --auth none curl http://localhost:3000/mydatapod/ If we now want to create an inbox container, to which people can write resources but not read resources, we first make a new directory sld mkdir base:/inbox/ that we can confirm in our listing to exist now: sld ls base:/ Listing permissions for this created container, we see that no public permissions are set for this container. sld access list --pretty base:/inbox/ Now, we set public read permissions for this resource: sld access set base:/inbox/ p=w Listing permissions again shows that now only read permissions are assigned to this container. sld access list --pretty base:/inbox/ Note that setting permissions for an identifier removes any existing permissions. Setting read permissions as follows sld access set base:/inbox/ p=r will remove the existing write permission, as we did not renew it in this operation. sld access list --pretty base:/inbox/ To give access to our contact to also read our inbox, we assign access rules for their WebID. sld access set base:/inbox/ https://poeple.org/alice/webid=r Listing the permissions now we see Alice has been given read access to our inbox container. Requesting and querying resources \u00b6 In addition to authentication and authorization management, Bashlib provides a set of commands aimed at the requesting and querying of resources that we will go over here. The documentation for every command can be found here . The first command we have already touched upon is curl . It mimics the curl command provided by BASH and provides options for choosing the HTTP method, the body and more. Simply executing a curl on a URL performs a GET request. sld curl base:/ The next command we have seen before is the ls command. It outputs a listing of the targeted container, and can be made to include access control and metadata resources present in the container as well. sld ls -la base:/ The tree command allows us to create a directory tree starting from the targeted container. sld tree base:/ The cp command allows the copying of resources on the same pod, between pods, or from and to the local file system. It per default is fully recursive, and will copy the whole underlying resource tree to the target destination. sld cp /path/to/img.png base:/images/img.png The mv command is similar to the copy command, but it removes the source resources after the move (except for when moving from the local file system). sld mv base:/images/img.png base:/photos/. The rm command can be used to remove resources and containers from a Solid pod. It requires an explicit flag to work recursive. sld rm -r base:/photos/ The mkdir command creates an empty container on a Solid pod. sld mkdir base:/documents/ The touch command creates an empty resource sld touch base:/documents/work/file.txt The find command searches all resources in the given container and its sub-containers for a name match. sld find base:/ file.txt The find command evaluates a query over all resources in the given container and its sub-containers individually. The --federated flag can be used to evaluate the query over the combined knowledge graph of all found resources. sld query --all base:/ \"Select ?person where { ?person <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://xmlns.com/foaf/0.1/Person> . }\" The edit command opens a remote resource in a local editor. It copies the resource to a temporary file, after which changes can be committed to this file. Upon pressing a button in the Bashlib program, this temporary file is synced again with the remote resource. sld edit base:/documents/work/file.txt Setting up a profile image on your pod \u00b6 Let's end with a concrete task, setting a profile picture. We choose our profile picture located at ~/Pictures/my_nice_picture.png . To start, we copy the image to our pod at the location base:/profile/img.png using the following command: sld cp ~/Pictures/my_nice_picture.png base:/profile/img.png As profile pictures need to be publicly readable, so everyone can see your profile picture, we set public read permissions for this resource. sld access set base:/profile/img.png p=r With our image uploaded to our pod and made public, we will now have to edit our profile document to link the new profile image to our WebID (use the --editor option to choose an alternative editor) sld edit webId: This will open our profile document in our default editor (or our editor of choice). We now add the following line to the document (replace imageurl with the url of the newly uploaded image): <http://localhost:3000/mydatapod/profile/card#me> <http://xmlns.com/foaf/0.1/img> <http://localhost:3000/mydatapod/profile/img.png> . Now save the document, and exit the editor. Press on any key to continue, and your profile document is now updated with a link to your newly added profile image Congratulations, you just set your profile image! If you were using a web-hosted Solid pod, you should be able to see your result when looking at your profile here . For locally hosted pods however, most likely your browser will stop you from looking at localhost links because of CORS errors. Creating an automated flow \u00b6 Many background workflows may require a lot of automation, using Bashlib mainly in shell scripts. For this, Bashlib supports all required functionality to fully automate Solid workflows, although support for these flows relies on the non-interactive token-based authentication option, which is only available for the Community Solid Server and Enterprise Solid Server implementations. Automate token creation \u00b6 To start out, we create an authentication token for the token-based authentication flows. sld auth create-token-css --webid http://localhost:3000/mydatapod/profile/card#me --name bashlib_token --email bob@test.com --password bob Automate profile selection for different functions \u00b6 To automate the selection of a WebID when running a background script,","title":"Tutorial"},{"location":"tutorial/#bashlib-tutorial","text":"This tutorial provides a quick setup of a Community Solid Server, and some useful interactions to manage resources on a created Solid pod.","title":"Bashlib Tutorial"},{"location":"tutorial/#setting-up-a-solid-server","text":"To use Bashlib, we first explain how to setup your own local Solid Server on which you can create your first Solid pod. In case you already have a Solid pod, feel free to skip this section. Alteratively, you may want to create a Solid pod on one of the free Pod provider services . Note that when using a free provider, if something goes wrong you might not be able to recover your data, or that service may be relatively slow, as there are free and community hosted. Additionally, only server running the Community Solid Server or Inrupt Enterprise Solid Server versions will be able to make client credentials to authenticate automatically without needing an interactive browser session. A free CSS hosting service can be found here . A free ESS hosting service can be found here . To setup your own local Community Solid Server, we make use in this tutorial of the Community Solid Server . The full tutorial can be found here . When you are done with the tutorial, you are free to remove the current folder to delete all created files! We use NPX to setup a CSS instance, and use a file config to store all data in the data/ folder. Ideally execute the tutorial in an empty directory, so afterwards you can remove all tutorial data by removing this directory! npx @solid/community-server -c @css:config/file.json -f data/ Congratulations! Your own CSS instance is now running on localhost on port 3000! Keep this shell open during the tutorial! You can confirm this by browsing to http://localhost:3000 in the browser, and you will be greeted with a setup screen.","title":"Setting up a Solid Server"},{"location":"tutorial/#creating-an-account","text":"Now we will create an account and associated WebID on this local CSS instance. Navigating to http://localhost:3000 in the browser, and you will be greeted with a setup screen. Press the Sign up for an account link to create an account on this local CSS instance. As this is a local instance, the email does not really matter, as this is only used for authentication purposes and recovering a pod, but is never verified. For now, we make an example person Bob using his email bob@test.com and password bob . Next, we make a pod for this account by pressing the Create pod link! Here, we provide a pod name, for example mydatapod . Congratulations, you just created a new data pod at http://localhost:3000/mydatapod/ and associated WebID at http://localhost:3000/mydatapod/profile/card#me !","title":"Creating an account"},{"location":"tutorial/#setting-up-bashlib","text":"With our Solid pod and WebID created, now it is time to setup Bashlib! For a quick setup, we use NPX npx solid-bashlib curl http://localhost:3000/mydatapod/profile/card#me which prompts to install bashlib, and on installation with show your WebID profile. Alternatively, a local setup can be cloned from github. git clone https://github.com/SolidLabResearch/Bashlib.git cd Bashlib npm install npm run build; node bin/solid.js curl http://localhost:3000/mydatapod/profile/card#me For the remainder of this tutorial, we will use sld as the alias for npx solid-bashlib .","title":"Setting up Bashlib"},{"location":"tutorial/#managing-authentication","text":"As Solid aims to provide secure online data management, working with secured resources requires users to be authenticated for the system to evaluate their access. The full documentation on the authentication options for bashlib can be found in the authentication management section .","title":"Managing Authentication"},{"location":"tutorial/#executing-commands-without-authentication","text":"To run commands over public data without any authentication, we can start bashlib with the --auth flag set to none to prevent it from automatically trying to authenticate requests. We can for example make an unauthenticated request to our created WebID as follows (WebID resources are always public): sld --auth none curl --header \"Accept: application/n-triples\" http://localhost:3000/mydatapod/profile/card#me This creates unauthenticated fetch request to the WebID resource and outputs the result on the command line. As we passed a --header option that requests the result in an n-triples format, the returned data is formatted in an n-triples format.","title":"Executing commands without authentication"},{"location":"tutorial/#setting-a-webid-and-interactive-authentication","text":"However, for most personal use resource operations will require the user to be authenticated. To start, we pass our created WebID to Bashlib. This can either be done using the interactive interface by running: sld auth set and selecting the option: Authenticate using new WebID and providing your WebID here. Alternatively, the WebID option can be provided directly in the arguments as follows: sld auth set http://localhost:3000/mydatapod/profile/card#me To see the WebID used by Bashlib to authenticate requests, we can run sld auth show --pretty which shows us that our WebID is now used by bashlib to authenticate requests. However, now we've only told Bashlib our WebID, we have not yet given it the means to authenticate a request using this WebID. There are two options for authenticating with Bashlib to be able to make authenticated requests. We can use an interactive authentication flow that uses our browser to authenticate, or we can create a credentials token that we can store which will allow us to create authenticated requests directly without needing an interactive browser session. Per default, Bashlib will use a dynamic authentication approach, where it will first look if there is an active authenticated session it can reuse. If not, it will try to create a new session using any stored credentials token. If none can be found, it will open a browser window and have the user authenticate themselves interactively using the browser. To create a listing of the profile directory of our Solid pod, run the following command: npx solid-bashlib ls base:/profile/ This base: is an alias for our pod root ( http://localhost:3000/mydatapod/ ), if it can be discovered from the user WebID. Upon running the command, a browser window will pop-up asking the user to authenticate themselves. Once logged in, looking back at the command line we see that a listing is displayed of the profile container, which is only visible to the user WebID, so the authentication was successful. Additionally, running the listing command again, we see that no authentication is required, as Bashlib stored the previous session, and reuses this session to authenticate subsequent requests made for the same WebID. npx solid-bashlib ls base:/profile --pretty Looking at the current authentication status sld auth show --pretty we see that an active session is available now.","title":"Setting a WebId and interactive authentication"},{"location":"tutorial/#creating-a-credentials-token-to-automate-authentication","text":"However, having to authenticate interactions can be an overhead, especially if commands are to be executed automatically from a script. To automate the authentication flow, we need to make a token that will allow us to do an authentication flow that does not require a browser window. Currently the generation of credential tokens that can directly authenticate a user session is only provided by the Community Solid Server and the Enterprise Solid Server. Both implementations differ however. In this section we only address the creation of a token for the Community Solid Server. If you have a pod on an Enterprise Solid Server, you can follow the documentation for ESS token creation in the authentication section . To create the credentials token for our current WebID in Bashlib, we execute the following command: sld auth create-token-css This will prompt us on if the token we want to create is for our currently logged in user. Press y to continue. Now we are prompted for our email (bob@test.com) and password (bob). To confirm the generation of our token, we run the show command again, which now indicates we have an auth token present. npx solid-bashlib auth show --pretty From now on, after session expiration, new sessions will be automatically generated through this token without going through an interactive browser session. All authentication information is stored per default at ~/.solid/","title":"Creating a credentials token to automate authentication"},{"location":"tutorial/#managing-authorization","text":"Now that we have an authorized user, we can manage the authorization rules for the resources on our Solid pod. Note that Solid has two competing authorization systems. The Web Access Controls specification that uses .acl resources to manage resource access, and the Access Control Protocol that uses .acp resources to manage resource access. Bashlib implements two different access management regimes: It fully implements the WAC suite for listing and editing permissions and removing permission resources, and it implements the universal access suite that can work with both WAC and ACP access management systems. However this universal system is less expressive in its functionality. Bashlib will automatically detect the used access control mechanism, but enables additional functionality when working with pods hosted on a WAC-based Solid Server such as access propagation and identity groups.","title":"Managing authorization"},{"location":"tutorial/#listing-authorization","text":"To list the permissions set on the root of our pod, run: sld access list --pretty base:/ We see that our WebID has full permissions to read, write, append and control resources on our pod (deleting a resource requires write permissions). We also notice public read permissions on our root container, which we will change in the next section. If our pod is hosted on a WAC-based Solid Server (such as the Community Solid Server we setup above), we see the WebID permissions on our root are set as default , meaning they are enforced on all sub-containers and resources of this root container unless otherwise specified by these sub-containers or resources. Additionally, the inherited field shows if this authorization state is defined by an .acl file tied directly to the resource itself (in that case the value is no), or if it was derived of a default permissions set by one of the resource parents (in that case the value is yes).","title":"Listing authorization"},{"location":"tutorial/#editing-authorization","text":"As shown above, currently our pod root container is set to be publicly readable. To change these permissions, we set the public access rights to our root container to be nothing. When interacting pods hosted on a WAC-based Solid Server, we can use the --default flag to make these access rules the default, however as the default access defined by the system is no access, this makes no real difference in this case. To do this, we run the following command: sld access set base:/ p= The base:/ value targets our pod root container. The p value sets the access target as public , and the empty space after the = symbol indicates that the permissions given to the public are none. We confirm this by listing the permissions again: sld access list --pretty base:/ showing public read permissions are not set anymore. Additionally, we see that a resource request to the full URI gives us a 401 Unauthenticated response. sld --auth none curl http://localhost:3000/mydatapod/ If we now want to create an inbox container, to which people can write resources but not read resources, we first make a new directory sld mkdir base:/inbox/ that we can confirm in our listing to exist now: sld ls base:/ Listing permissions for this created container, we see that no public permissions are set for this container. sld access list --pretty base:/inbox/ Now, we set public read permissions for this resource: sld access set base:/inbox/ p=w Listing permissions again shows that now only read permissions are assigned to this container. sld access list --pretty base:/inbox/ Note that setting permissions for an identifier removes any existing permissions. Setting read permissions as follows sld access set base:/inbox/ p=r will remove the existing write permission, as we did not renew it in this operation. sld access list --pretty base:/inbox/ To give access to our contact to also read our inbox, we assign access rules for their WebID. sld access set base:/inbox/ https://poeple.org/alice/webid=r Listing the permissions now we see Alice has been given read access to our inbox container.","title":"Editing authorization"},{"location":"tutorial/#requesting-and-querying-resources","text":"In addition to authentication and authorization management, Bashlib provides a set of commands aimed at the requesting and querying of resources that we will go over here. The documentation for every command can be found here . The first command we have already touched upon is curl . It mimics the curl command provided by BASH and provides options for choosing the HTTP method, the body and more. Simply executing a curl on a URL performs a GET request. sld curl base:/ The next command we have seen before is the ls command. It outputs a listing of the targeted container, and can be made to include access control and metadata resources present in the container as well. sld ls -la base:/ The tree command allows us to create a directory tree starting from the targeted container. sld tree base:/ The cp command allows the copying of resources on the same pod, between pods, or from and to the local file system. It per default is fully recursive, and will copy the whole underlying resource tree to the target destination. sld cp /path/to/img.png base:/images/img.png The mv command is similar to the copy command, but it removes the source resources after the move (except for when moving from the local file system). sld mv base:/images/img.png base:/photos/. The rm command can be used to remove resources and containers from a Solid pod. It requires an explicit flag to work recursive. sld rm -r base:/photos/ The mkdir command creates an empty container on a Solid pod. sld mkdir base:/documents/ The touch command creates an empty resource sld touch base:/documents/work/file.txt The find command searches all resources in the given container and its sub-containers for a name match. sld find base:/ file.txt The find command evaluates a query over all resources in the given container and its sub-containers individually. The --federated flag can be used to evaluate the query over the combined knowledge graph of all found resources. sld query --all base:/ \"Select ?person where { ?person <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://xmlns.com/foaf/0.1/Person> . }\" The edit command opens a remote resource in a local editor. It copies the resource to a temporary file, after which changes can be committed to this file. Upon pressing a button in the Bashlib program, this temporary file is synced again with the remote resource. sld edit base:/documents/work/file.txt","title":"Requesting and querying resources"},{"location":"tutorial/#setting-up-a-profile-image-on-your-pod","text":"Let's end with a concrete task, setting a profile picture. We choose our profile picture located at ~/Pictures/my_nice_picture.png . To start, we copy the image to our pod at the location base:/profile/img.png using the following command: sld cp ~/Pictures/my_nice_picture.png base:/profile/img.png As profile pictures need to be publicly readable, so everyone can see your profile picture, we set public read permissions for this resource. sld access set base:/profile/img.png p=r With our image uploaded to our pod and made public, we will now have to edit our profile document to link the new profile image to our WebID (use the --editor option to choose an alternative editor) sld edit webId: This will open our profile document in our default editor (or our editor of choice). We now add the following line to the document (replace imageurl with the url of the newly uploaded image): <http://localhost:3000/mydatapod/profile/card#me> <http://xmlns.com/foaf/0.1/img> <http://localhost:3000/mydatapod/profile/img.png> . Now save the document, and exit the editor. Press on any key to continue, and your profile document is now updated with a link to your newly added profile image Congratulations, you just set your profile image! If you were using a web-hosted Solid pod, you should be able to see your result when looking at your profile here . For locally hosted pods however, most likely your browser will stop you from looking at localhost links because of CORS errors.","title":"Setting up a profile image on your pod"},{"location":"tutorial/#creating-an-automated-flow","text":"Many background workflows may require a lot of automation, using Bashlib mainly in shell scripts. For this, Bashlib supports all required functionality to fully automate Solid workflows, although support for these flows relies on the non-interactive token-based authentication option, which is only available for the Community Solid Server and Enterprise Solid Server implementations.","title":"Creating an automated flow"},{"location":"tutorial/#automate-token-creation","text":"To start out, we create an authentication token for the token-based authentication flows. sld auth create-token-css --webid http://localhost:3000/mydatapod/profile/card#me --name bashlib_token --email bob@test.com --password bob","title":"Automate token creation"},{"location":"tutorial/#automate-profile-selection-for-different-functions","text":"To automate the selection of a WebID when running a background script,","title":"Automate profile selection for different functions"},{"location":"contributing/making-changes/","text":"Pull Requests \u00b6","title":"Pull Requests"},{"location":"contributing/making-changes/#pull-requests","text":"","title":"Pull Requests"},{"location":"documentation/overview/","text":"Documentation Overview \u00b6 The Bashlib command line interface provides straightforward commands to interact with your Solid pod. It can be useful both for personal use, setting up small workflows or quick demonstrations of proof of concepts. The authentication options enable quick switching between WebIDs and Solid Pods. As not everything is optimized for performance, operations that target many resources or few but large resources may not be performant enough for some use-cases, as the internal resource management does not make use of streaming. To login and manage authentication info for Bashlib, navigate to the authentication management section . For an overview of the available commands, their options and code example, navigate to the available commands section . To view and manage access to resources, navigate to the access management section . To see how to use aliases to speed up your flow, navigate to the using aliases section .","title":"Overview"},{"location":"documentation/overview/#documentation-overview","text":"The Bashlib command line interface provides straightforward commands to interact with your Solid pod. It can be useful both for personal use, setting up small workflows or quick demonstrations of proof of concepts. The authentication options enable quick switching between WebIDs and Solid Pods. As not everything is optimized for performance, operations that target many resources or few but large resources may not be performant enough for some use-cases, as the internal resource management does not make use of streaming. To login and manage authentication info for Bashlib, navigate to the authentication management section . For an overview of the available commands, their options and code example, navigate to the available commands section . To view and manage access to resources, navigate to the access management section . To see how to use aliases to speed up your flow, navigate to the using aliases section .","title":"Documentation Overview"},{"location":"documentation/setup/","text":"Setting up Bashlib \u00b6 Requirements \u00b6 Node >= 16.0.0 Setup \u00b6 Using github git clone git@github.com:SolidLabResearch/Bashlib.git cd Bashlib npm install npm run build After the install, add an alias to your .bashrc for convenience: alias sld=\"node /path/to/folder/.../bin/solid.js\" Using NPX npx solid-bashlib This will automatically install any dependencies. You can add an alias to your .bashrc for convenience: alias sld=\"npx solid-bashlib\" Note that while more straightforward, using NPX incurs a performance penalty of up to 1 second! Consider installing the tool via Github to speed things up!","title":"Setup"},{"location":"documentation/setup/#setting-up-bashlib","text":"","title":"Setting up Bashlib"},{"location":"documentation/setup/#requirements","text":"Node >= 16.0.0","title":"Requirements"},{"location":"documentation/setup/#setup","text":"Using github git clone git@github.com:SolidLabResearch/Bashlib.git cd Bashlib npm install npm run build After the install, add an alias to your .bashrc for convenience: alias sld=\"node /path/to/folder/.../bin/solid.js\" Using NPX npx solid-bashlib This will automatically install any dependencies. You can add an alias to your .bashrc for convenience: alias sld=\"npx solid-bashlib\" Note that while more straightforward, using NPX incurs a performance penalty of up to 1 second! Consider installing the tool via Github to speed things up!","title":"Setup"},{"location":"documentation/cli/access/","text":"Access Management \u00b6 The access command is used to manage access of resources on a Solid pod. Solid has two competing authorization proposals, Web Access Controls that use .acl resources, and Access Control Policies that use .acp resources. Bashlib implements full support for the management of WAC resources, and partial support for the management of ACP resources using the Inrupt universalAccess libraries. The access command has thee subcommands: list , set and delete List \u00b6 The list subcommand provides a listing of all access information for the targeted (container) resource. arguments \u00b6 Arguments: url Resource URL The url argument is the target (container) resource for which access is to be listed. options \u00b6 Options: --acl Displays ACL specific information such as group and default access -p, --pretty Pretty format -v, --verbose Log all operations The --acl option displays information specific to .acl resources, such as default access indicating that the authorization is also enforced on child resources without their own .acl file or inhereted access indicating that the access rules are derived from the default access of a parent resource. The --pretty option outputs the information in a table format The --verbose option outputs operation logs. examples \u00b6 List the pod root access in a pretty format sld access list --pretty https://mypod.org/ Set \u00b6 The set subcommand is used to edit resource access. arguments \u00b6 Arguments: url Resource URL permissions Permission format when setting permissions. Format according to id=[a][c][r][w]. For public permissions please set id to \"p\". For the current authenticated user please set id to \"u\". For specific agents, set id to be the agent webid. The url argument is the target (container) resource for editing access rules. The permissions argument is a formatted string containing the identifier for which rules are defined, and the associated permissions that are to be set for the given identifier. Using p as the identifier targets public permissions and using u as the identifier targets the current WebID of the authenticated Bashlib session. The a is append rights, allowing PATCH operations to be made. The c is control rights, allowing the editing of access controls for a resource (for ACP this includes both readControl and writeControl) The r is read rights, allowing a GET request to a resource. The p is write rights. For a resource this allows it to be overwritten using a PUT request. For a container this allows resources to be added using both PUT and POST requests. options \u00b6 Options: --acl Enables ACL specific operations --default and --group --default Set the defined permissions as default (only in --acl mode) --group Process identifier as a group identifier (only in --acl mode) -v, --verbose Log all operations -h, --help display help for command The --acl option enables the default and group flags to be used, which are WAC specific operations. The --default option makes the current access rules default for all children resources when defined on a container. Only available in --acl mode. The --group option indicates that the identifier represents a group identifier. Only available in --acl mode. The --verbose option outputs operation logs. examples \u00b6 Setting public read permissions for a resource sld access set https://mypod.org/resource p=r Giving access to alice to write to a container sld access set http://mypod.org/container/ http://people.org/alice/webid=w Delete \u00b6 The delete subcommand is only available for WAC based pods using .acl resources. Note that removing a resource using the rm command also removes the associated .acl resource on the CSS automatically. arguments \u00b6 Arguments: url Resource URL The url argument is the target .acl resource that will be deleted. options \u00b6 Options: -v, --verbose Log all operations The --verbose option output operation logs. example \u00b6 Removing an acl resource. sld access remove https://mypod.org/resource.acl examples \u00b6","title":"Manage Resource Access"},{"location":"documentation/cli/access/#access-management","text":"The access command is used to manage access of resources on a Solid pod. Solid has two competing authorization proposals, Web Access Controls that use .acl resources, and Access Control Policies that use .acp resources. Bashlib implements full support for the management of WAC resources, and partial support for the management of ACP resources using the Inrupt universalAccess libraries. The access command has thee subcommands: list , set and delete","title":"Access Management"},{"location":"documentation/cli/access/#list","text":"The list subcommand provides a listing of all access information for the targeted (container) resource.","title":"List"},{"location":"documentation/cli/access/#arguments","text":"Arguments: url Resource URL The url argument is the target (container) resource for which access is to be listed.","title":"arguments"},{"location":"documentation/cli/access/#options","text":"Options: --acl Displays ACL specific information such as group and default access -p, --pretty Pretty format -v, --verbose Log all operations The --acl option displays information specific to .acl resources, such as default access indicating that the authorization is also enforced on child resources without their own .acl file or inhereted access indicating that the access rules are derived from the default access of a parent resource. The --pretty option outputs the information in a table format The --verbose option outputs operation logs.","title":"options"},{"location":"documentation/cli/access/#examples","text":"List the pod root access in a pretty format sld access list --pretty https://mypod.org/","title":"examples"},{"location":"documentation/cli/access/#set","text":"The set subcommand is used to edit resource access.","title":"Set"},{"location":"documentation/cli/access/#arguments_1","text":"Arguments: url Resource URL permissions Permission format when setting permissions. Format according to id=[a][c][r][w]. For public permissions please set id to \"p\". For the current authenticated user please set id to \"u\". For specific agents, set id to be the agent webid. The url argument is the target (container) resource for editing access rules. The permissions argument is a formatted string containing the identifier for which rules are defined, and the associated permissions that are to be set for the given identifier. Using p as the identifier targets public permissions and using u as the identifier targets the current WebID of the authenticated Bashlib session. The a is append rights, allowing PATCH operations to be made. The c is control rights, allowing the editing of access controls for a resource (for ACP this includes both readControl and writeControl) The r is read rights, allowing a GET request to a resource. The p is write rights. For a resource this allows it to be overwritten using a PUT request. For a container this allows resources to be added using both PUT and POST requests.","title":"arguments"},{"location":"documentation/cli/access/#options_1","text":"Options: --acl Enables ACL specific operations --default and --group --default Set the defined permissions as default (only in --acl mode) --group Process identifier as a group identifier (only in --acl mode) -v, --verbose Log all operations -h, --help display help for command The --acl option enables the default and group flags to be used, which are WAC specific operations. The --default option makes the current access rules default for all children resources when defined on a container. Only available in --acl mode. The --group option indicates that the identifier represents a group identifier. Only available in --acl mode. The --verbose option outputs operation logs.","title":"options"},{"location":"documentation/cli/access/#examples_1","text":"Setting public read permissions for a resource sld access set https://mypod.org/resource p=r Giving access to alice to write to a container sld access set http://mypod.org/container/ http://people.org/alice/webid=w","title":"examples"},{"location":"documentation/cli/access/#delete","text":"The delete subcommand is only available for WAC based pods using .acl resources. Note that removing a resource using the rm command also removes the associated .acl resource on the CSS automatically.","title":"Delete"},{"location":"documentation/cli/access/#arguments_2","text":"Arguments: url Resource URL The url argument is the target .acl resource that will be deleted.","title":"arguments"},{"location":"documentation/cli/access/#options_2","text":"Options: -v, --verbose Log all operations The --verbose option output operation logs.","title":"options"},{"location":"documentation/cli/access/#example","text":"Removing an acl resource. sld access remove https://mypod.org/resource.acl","title":"example"},{"location":"documentation/cli/access/#examples_2","text":"","title":"examples"},{"location":"documentation/cli/aliases/","text":"Using aliases \u00b6 The current implementation of using aliases is weak, and may be changed in subsequent releases. Alias management is a potential future addition. Base \u00b6 The base: alias indicates the root of your Solid pod. Executing a command using this alias will target the root of your pod, if it is known. This value is taken from the pim:storage triple in the WebID. In case multiple storage locations are available, results in using this may be inconsistent. The following command wil make a listing of the root of the Solid pod of the current user. sld ls base:/ WebID \u00b6 The webid: alias will target the user WebID. The following command wil retrieve the user WebID. sld curl webid: Inbox \u00b6 The inbox: alias targets the user inbox, if known. This value is taken from the ldp:inbox triple in the WebID. The following command queries the inbox for events sld query inbox:/ \"Select ?event where { ?event a <http://example.org/Event> }","title":"Using Aliases"},{"location":"documentation/cli/aliases/#using-aliases","text":"The current implementation of using aliases is weak, and may be changed in subsequent releases. Alias management is a potential future addition.","title":"Using aliases"},{"location":"documentation/cli/aliases/#base","text":"The base: alias indicates the root of your Solid pod. Executing a command using this alias will target the root of your pod, if it is known. This value is taken from the pim:storage triple in the WebID. In case multiple storage locations are available, results in using this may be inconsistent. The following command wil make a listing of the root of the Solid pod of the current user. sld ls base:/","title":"Base"},{"location":"documentation/cli/aliases/#webid","text":"The webid: alias will target the user WebID. The following command wil retrieve the user WebID. sld curl webid:","title":"WebID"},{"location":"documentation/cli/aliases/#inbox","text":"The inbox: alias targets the user inbox, if known. This value is taken from the ldp:inbox triple in the WebID. The following command queries the inbox for events sld query inbox:/ \"Select ?event where { ?event a <http://example.org/Event> }","title":"Inbox"},{"location":"documentation/cli/authentication/","text":"Authentication Management \u00b6 The Bashlib CLI interface provides multiple options for authentication management. It enables interactive login flows using the browser, that work with any Solid pod server. Additionally, it includes the client credentials flow to generate authentication tokens without needing a browser login both for the Community Solid Server v7 and the Enterprise Solid Server from Inrupt. All examples make use of the abstraction sld as an alias for node bin/solid.js , Enforcing specific authorization flows \u00b6 When setting up test flows on Solid, it might be interesting to force a specific authentication flows to be used. For this, the --auth option can be set on the bashlib program as such:] sld --auth interactive This examples forces authentication via an interactive browser session. Other options are token for only token based authentication, none for no authentication and request to dynamically choose an authentication option during use, which is the default. The --port option can be changed to change the port of the local service that is setup to manage interactive authentication flows with the browser. Auth command \u00b6 The auth command contains all functionality to manage authentication options and create client credentials tokens. Set \u00b6 The set subcommand is used to manage the authentication session for Bashlib. It provides the ability to set a specific WebID as an argument, or if no argument is given starts an interactive selection dialog to change the active WebID. arguments \u00b6 Arguments: webid Set active WebID directly, without requiring manual selection. The webid argument directly sets the session to the provided WebID value. examples \u00b6 Interactive session management sld auth set Setting a specific active WebID sld auth set https://people.org/alice/webid Show \u00b6 The show subcommand shows the current authentication session. It shows the WebId, if there is an active authentication session and if a client credential token is available. options \u00b6 Options: -p, --pretty Show listing in table format. The --pretty option displays the result in a table formate. examples \u00b6 sld auth show Clear \u00b6 The clear subcommand clears the current authentication session and active WebID. It does not remove any stored authentication information. examples \u00b6 sld auth clear List \u00b6 The list subcommand lists the stored authentication information. It shows the WebIds, if there is an active authentication session and if a client credential token is available. options \u00b6 Options: -p, --pretty Show listing in table format. The --pretty option displays the result in a table formate. examples \u00b6 sld auth list Remove \u00b6 The remove subcommand provides the ability to remove authentication information from Bashlib. It provides an interactive menu if no argument is given, or can remove information for specific WebIDs or all information directly via the CLI arguments. arguments \u00b6 Arguments: string webid | all The command has an optional parameter. When passing the argument string all , all authentication information is removed. Passing a specific WebID removes all authentication information tied to that WebID. If no argument is passed, an interactive CLI menu is provided. examples \u00b6 Opening the interactive menu sld auth remove Removing all authentication information sld auth remove all Removing a specific WebID sld auth remove https://people.org/alice/webid Create Token (CSS) \u00b6 The token creation is divided in two subcommands, one for the Community Solid Server and one for the Inrupt Enterprise Solid Server, as both have a different approach to token generation for client applications. The create-token-css command creates a client credentials token for pods hosted on a Community Solid Server version 7. The authentication options can be passed both as command line arguments, or in an interactive dialog if they are not provided through the CLI options. The interactive creation menu will ask to use the WebID of the current session to create a token when available. options \u00b6 Options: -w, --webid <string> User WebID -n, --name <string> Token name -e, --email <string> User email -p, --password <string> User password -v, --verbose Log actions -h, --help display help for command The --webid option is the WebID for which the token is created. The --name option is the name of the token (only important for token management). The --email option is the email that was used to create the account tied to the WebID. The --password option is the password tied to the account. the --verbose option outputs operation logs. examples \u00b6 Open interactive dialog to create token sld auth create-token-css Create Token (ESS) \u00b6 The create-token-ess command creates a client credentials token for pods hosted on an Inrupt Enterprise Solid Server. The authentication options can be passed both as command line arguments, or in an interactive dialog if they are not provided through the CLI options. The interactive creation menu will ask to use the WebID of the current session to create a token when available. The Inrupt token generation relies on the registration of applications via their application registration service . After registering Bashlib, an id and secret value will be shown. These values need to be provided to this command to be able to automatically create authenticated sessions without needing interactive login. options \u00b6 Options: -w, --webid <string> User WebID -i, --id <string> application registration id -s, --secret <string> application registration secret -v, --verbose Log actions -h, --help display help for command The --webid option is the WebID for which the token is created. The --id option is the id value retrieved from the registration flow described above. The --secret option is the secret value retrieved from the registration flow described above. the --verbose option outputs operation logs. examples \u00b6 Open interactive dialog to create token sld auth create-token-ess","title":"Manage Authentication"},{"location":"documentation/cli/authentication/#authentication-management","text":"The Bashlib CLI interface provides multiple options for authentication management. It enables interactive login flows using the browser, that work with any Solid pod server. Additionally, it includes the client credentials flow to generate authentication tokens without needing a browser login both for the Community Solid Server v7 and the Enterprise Solid Server from Inrupt. All examples make use of the abstraction sld as an alias for node bin/solid.js ,","title":"Authentication Management"},{"location":"documentation/cli/authentication/#enforcing-specific-authorization-flows","text":"When setting up test flows on Solid, it might be interesting to force a specific authentication flows to be used. For this, the --auth option can be set on the bashlib program as such:] sld --auth interactive This examples forces authentication via an interactive browser session. Other options are token for only token based authentication, none for no authentication and request to dynamically choose an authentication option during use, which is the default. The --port option can be changed to change the port of the local service that is setup to manage interactive authentication flows with the browser.","title":"Enforcing specific authorization flows"},{"location":"documentation/cli/authentication/#auth-command","text":"The auth command contains all functionality to manage authentication options and create client credentials tokens.","title":"Auth command"},{"location":"documentation/cli/authentication/#set","text":"The set subcommand is used to manage the authentication session for Bashlib. It provides the ability to set a specific WebID as an argument, or if no argument is given starts an interactive selection dialog to change the active WebID.","title":"Set"},{"location":"documentation/cli/authentication/#arguments","text":"Arguments: webid Set active WebID directly, without requiring manual selection. The webid argument directly sets the session to the provided WebID value.","title":"arguments"},{"location":"documentation/cli/authentication/#examples","text":"Interactive session management sld auth set Setting a specific active WebID sld auth set https://people.org/alice/webid","title":"examples"},{"location":"documentation/cli/authentication/#show","text":"The show subcommand shows the current authentication session. It shows the WebId, if there is an active authentication session and if a client credential token is available.","title":"Show"},{"location":"documentation/cli/authentication/#options","text":"Options: -p, --pretty Show listing in table format. The --pretty option displays the result in a table formate.","title":"options"},{"location":"documentation/cli/authentication/#examples_1","text":"sld auth show","title":"examples"},{"location":"documentation/cli/authentication/#clear","text":"The clear subcommand clears the current authentication session and active WebID. It does not remove any stored authentication information.","title":"Clear"},{"location":"documentation/cli/authentication/#examples_2","text":"sld auth clear","title":"examples"},{"location":"documentation/cli/authentication/#list","text":"The list subcommand lists the stored authentication information. It shows the WebIds, if there is an active authentication session and if a client credential token is available.","title":"List"},{"location":"documentation/cli/authentication/#options_1","text":"Options: -p, --pretty Show listing in table format. The --pretty option displays the result in a table formate.","title":"options"},{"location":"documentation/cli/authentication/#examples_3","text":"sld auth list","title":"examples"},{"location":"documentation/cli/authentication/#remove","text":"The remove subcommand provides the ability to remove authentication information from Bashlib. It provides an interactive menu if no argument is given, or can remove information for specific WebIDs or all information directly via the CLI arguments.","title":"Remove"},{"location":"documentation/cli/authentication/#arguments_1","text":"Arguments: string webid | all The command has an optional parameter. When passing the argument string all , all authentication information is removed. Passing a specific WebID removes all authentication information tied to that WebID. If no argument is passed, an interactive CLI menu is provided.","title":"arguments"},{"location":"documentation/cli/authentication/#examples_4","text":"Opening the interactive menu sld auth remove Removing all authentication information sld auth remove all Removing a specific WebID sld auth remove https://people.org/alice/webid","title":"examples"},{"location":"documentation/cli/authentication/#create-token-css","text":"The token creation is divided in two subcommands, one for the Community Solid Server and one for the Inrupt Enterprise Solid Server, as both have a different approach to token generation for client applications. The create-token-css command creates a client credentials token for pods hosted on a Community Solid Server version 7. The authentication options can be passed both as command line arguments, or in an interactive dialog if they are not provided through the CLI options. The interactive creation menu will ask to use the WebID of the current session to create a token when available.","title":"Create Token (CSS)"},{"location":"documentation/cli/authentication/#options_2","text":"Options: -w, --webid <string> User WebID -n, --name <string> Token name -e, --email <string> User email -p, --password <string> User password -v, --verbose Log actions -h, --help display help for command The --webid option is the WebID for which the token is created. The --name option is the name of the token (only important for token management). The --email option is the email that was used to create the account tied to the WebID. The --password option is the password tied to the account. the --verbose option outputs operation logs.","title":"options"},{"location":"documentation/cli/authentication/#examples_5","text":"Open interactive dialog to create token sld auth create-token-css","title":"examples"},{"location":"documentation/cli/authentication/#create-token-ess","text":"The create-token-ess command creates a client credentials token for pods hosted on an Inrupt Enterprise Solid Server. The authentication options can be passed both as command line arguments, or in an interactive dialog if they are not provided through the CLI options. The interactive creation menu will ask to use the WebID of the current session to create a token when available. The Inrupt token generation relies on the registration of applications via their application registration service . After registering Bashlib, an id and secret value will be shown. These values need to be provided to this command to be able to automatically create authenticated sessions without needing interactive login.","title":"Create Token (ESS)"},{"location":"documentation/cli/authentication/#options_3","text":"Options: -w, --webid <string> User WebID -i, --id <string> application registration id -s, --secret <string> application registration secret -v, --verbose Log actions -h, --help display help for command The --webid option is the WebID for which the token is created. The --id option is the id value retrieved from the registration flow described above. The --secret option is the secret value retrieved from the registration flow described above. the --verbose option outputs operation logs.","title":"options"},{"location":"documentation/cli/authentication/#examples_6","text":"Open interactive dialog to create token sld auth create-token-ess","title":"examples"},{"location":"documentation/cli/commands/","text":"Commands \u00b6 Bashlib provides a set of commands to manage resources and containers on your Solid pod. All examples make use of the abstraction sld as an alias for node bin/solid.js , and for all example we expect the user to be authenticated as documented in the Authentication section . Curl \u00b6 The curl command wraps the internal authenticated fetch function with functionality that mimics the curl command found on most linux shells. arguments \u00b6 Arguments: url file to be fetched The url argument for this command is the URL of the resource that is the target of the curl command. options \u00b6 Options: -v, --verbose Write out full response and all headers -H, --only-headers Only write out headers -m, --method <string> GET, POST, PUT, DELETE, ... -b, --body <string> The request body -F, --file <string> File containing the request body. Ignored when the --body flag is set. -h, --header <string> The request header. Multiple headers can be added separately. e.g. -h \"Accept: application/json\" -h \"...\" The --verbose option writes out all response headers for a request. The --only-headers option only writes out response headers and ignores the response body. The --method option sets the HTTP request method. The --body option sets the HTTP request body. The --file option allows passing the file contents as the body of the request. The --header option allows the setting of a request header. Setting multiple headers requires multiple --header options to be set. examples \u00b6 A simple fetch request to a resource requesting a JSON-LD format sld curl https://mypod.org/resource --header \"Accept: application/ld+json\" A POST request using a file contents as request body sld curl -m POST -f /path/to/file https://mypod.org/resource List \u00b6 The ls command provides the listing of a container on a Solid pod. arguments \u00b6 Arguments: url URL of container to be listed The url argument for this command is the URL of the container for which a listing is to be made. This will only work if the url targets a container. It is important to add the trailing slash of the container URL! options \u00b6 Options: -a, --all List all files including acl files -f, --full List files with their full uri -l, --long List in long format -v, --verbose The --all option includes .meta , .acl and .acp files in the listing. The --full option writes full resource URIs, not only the resource name. The --long option writes the listing in a table format, including available information about size, latest modification, related metadata resource and related acl resource. The --verbose option shows warnings. examples \u00b6 A listing of a container sld ls https://mypod.org/container/ A listing of a container showing all resources in a long format sld ls --long --all https://mypod.org/container/ Copy \u00b6 The cp command can copy resources between Solid pod locations, across Solid pods, or between the local file system and a Solid pod. If the source location is a container or directory, it will recursively copy the container and all sub-containers recursively copying the whole underlying resource tree, including empty containers. The default copying behavior ignores .meta , .acl and .acp resources, which can be changed using the --all flag. The copy command automatically copies the full recursive resource tree. At the moment this behavior cannot be altered. In terms of overriding resources, the default setting is that every time a resource is found to already exist, an interactive prompt is shown. This behavior can be altered either by the --never-override or the --override options. arguments \u00b6 Arguments: src resource or container to be copied dst destination to copy file or directory to The src argument is the location of the resource or container to be moved. If the URL starts with http(s):// , the resource is assumed to be a remote resource, if not the resource is assumed to be local and matched with the local file system. The dst argument is the destination to which the source resource is to be copied. Similarly it uses the http(s):// prefix to decide if the location is local or remote. The default behavior ignores context resources such as .meta , .acl and .acp present in the directories. The --all flag ignores this behavior, though note that for authorization resources, as the target URIs are not edited, copying resources with these authorization resources does not imply they will result in the same access controls as the location they were copied from! options \u00b6 Options: -a, --all Copy .acl files in recursive directory copies -o, --override Automatically override existing files -n, --never-override Automatically override existing files -v, --verbose Log all read and write operations The --all option includes .meta , .acl and .acp files in the listing. The --override option automatically overrides existing resources. The --never-override option automatically mitigates resource overrides. The --verbose option shows warnings. examples \u00b6 Copying a local resource into a Solid pod container. sld cp /path/to/file https://mypod.org/container/ Copying a local resource to a specific remote resource sld cp /path/to/file.ttl https://mypod.org/container/resource.ttl Copy the contents of container 1 of alice's pod to container 2 of bob's pod. sld cp https://mypod.org/alice/container1/. https://mypod.org/bob/container2/ Copy the source container into the target container: https://mypod.org/bob/container2/container1/ . sld cp https://mypod.org/alice/container1/ https://mypod.org/bob/container2/ Copy a resource from a solid pod to the local filesystem sld cp https://mypod.org/container/resource.ttl ./resource.ttl Move \u00b6 The mv command moves resources between Solid pod locations, across Solid pods, or between the local file system and a Solid pod. If the source location is a container or directory, it will recursively move the container and all sub-containers recursively copying the whole underlying resource tree, including empty containers. When moving from the local file system, files will not be deleted! The default copying behavior ignores .meta , .acl and .acp resources, which can be changed using the --all flag. The move command automatically moves the full recursive resource tree. At the moment this behavior cannot be altered. In terms of overriding resources, the default setting is that every time a resource is found to already exist, an interactive prompt is shown. This behavior can be altered either by the --never-override or the --override options. arguments \u00b6 Arguments: src resource or container to be moved dst destination of the move The src argument is the location of the resource or container to be moved. If the URL starts with http(s):// , the resource is assumed to be a remote resource, if not the resource is assumed to be local and matched with the local file system. The dst argument is the destination to which the source resource is to be copied. Similarly it uses the http(s):// prefix to decide if the location is local or remote. The default behavior ignores context resources such as .meta , .acl and .acp present in the directories. The --all flag ignores this behavior, though note that for authorization resources, as the target URIs are not edited, copying resources with these authorization resources does not imply they will result in the same access controls as the location they were copied from! options \u00b6 Options: -a, --all Copy .acl files in recursive directory copies -o, --override Automatically override existing files -n, --never-override Automatically override existing files -v, --verbose Log all read and write operations The --all option includes .meta , .acl and .acp files in the listing. The --override option automatically overrides existing resources. The --never-override option automatically mitigates resource overrides. The --verbose option shows warnings. examples \u00b6 Moving a local resource into a Solid pod container. This does not remove the local resource! sld mv /path/to/file https://mypod.org/container/ Moving a local resource to a specific remote resource. This does not remove the local resource! sld mv /path/to/file.ttl https://mypod.org/container/resource.ttl Move the contents of container1 into container2. This removes container 1. sld cp https://mypod.org/alice/container1/. https://mypod.org/bob/container2/ Move the source container into the target container. sld cp https://mypod.org/alice/container1/ https://mypod.org/bob/container2/container1/ Move a resource from a solid pod to the local filesystem sld cp https://mypod.org/container/resource.ttl ./resource.ttl Remove \u00b6 The rm command can remove resources and/or directories from a remote Solid pod. arguments \u00b6 Arguments: urls URL of container to be listed The urls parameter accepts a sequence of urls that need to be removed. options \u00b6 Options: -r, --recursive Recursively removes all files in given container (.acl files are removed on resource removal) -v, --verbose Log all operations The --recursive flag must be set when removing container resources. This automatically also removes any contained .acl , .acp and .meta resources. The --verbose flag outputs operation logs. examples \u00b6 Remove two resources sld rm https://mypod.org/resource1 https://mypod.org/resource2 Remove a container sld rm https://mypod.org/container/ Mkdir \u00b6 The mkdir command creates a new container on a remote Solid pod. The command automatically creates all parent directories that do not exist when specifying a subdirectory to create, and fails if the target container already exists. arguments \u00b6 Arguments: url Container to start the search The url argument is the target container to be created. options \u00b6 Options: -v, --verbose Log all operations The --verbose flag outputs operation logs. examples \u00b6 Create a new container sld mkdir https://mypod.org/container/ Touch \u00b6 The touch command creates an empty resource at the target location. This cannot create containers, for this use the mkdir command. The content type of the created resource is derived from the content type flag or if that is missing from the file extension. If neither can be found an error is thrown. arguments \u00b6 Arguments: url resource to be created The url argument is the target resource that is to be created. options \u00b6 Options: -c, --content-type <string> Content type of the created resource -v, --verbose Log all operations the --content-type flag provides The --verbose flag outputs operation logs. examples \u00b6 Create a new resource sld touch --content-type text/turtle https://mypod.org/container/resource Tree \u00b6 The tree command provides a tree-structured listing of the target container and all its subcontainers. arguments \u00b6 Arguments: url Base container to construct tree over The url argument is the target container for which the tree listing is to be made. options \u00b6 Options: -a, --all Display .acl, .acp and .meta resources -f, --full Display full resource URIs -v, --verbose Log all operations The --all flag includes the .acl , .acp and .meta context resources in the command output. The --full flag displays the resulting resources using their full URIs The --verbose flag outputs operation logs. examples \u00b6 Create tree listing on the root of a Solid pod. sld tree https://mypod.org/ Find \u00b6 The find command can be used to find resources based on their name. arguments \u00b6 Arguments: url Container to start the search filename Filename to match, processed as RegExp(filename) The url parameter is the container that forms the root of the resource tree in which the search is executed. The filename parameter is the filename to match, processed as a javascript RegExp. options \u00b6 Options: -a, --all Match .acl, .acp and .meta files -f, --full Match full filename. -v, --verbose Log all operations The --all flag also matches access control and metadata files. The --full flag matches on and returns the full URIs of resources. The --verbose flag outputs operation logs. examples \u00b6 Find a resource named card in the profile/ container. sld find http://mypod.org/profile/ card Query \u00b6 The query command executes a SPARQL query over a target resource or container. In case a container is queried, all contained resources and subcontainers are recursively queried as well. The query itself is not federated, each query is individually evaluated over every resource. The following resources are included when querying: .ttl, .trig .nt, .nq, .jsonld, .rdf both on their resource extensions and their content type.. The Comunica engine is used for query evaluation. Note that only SELECT queries are supported! arguments \u00b6 Arguments: url Resource to query. In case of container recursively queries all contained files. query SPARQL query string | file path containing SPARQL query when -q flag is active The url argument is the target resource or container to query. Containers are queried recursively on all contained resources in its resource tree. The query argument is either a SPARQL query in quotes, or the path to a file containing a sparql query if the --queryfile flag has been set. options \u00b6 Options: -a, --all Match .acl and .meta files -q, --queryfile Process query parameter as file path of SPARQL query -p, --pretty Pretty format -f, --full Return containing files using full filename. -v, --verbose Log all operations The --all flag includes .acl , .acp and .meta resources in the query targets. The --queryfile flag changes the query argument to a file path for a resource containing a SPARQL query. The --pretty flag outputs the results in a table. The --full flag gives the full resource URIs of where the matches were found. The --verbose outputs operation logs. examples \u00b6 Evaluating a federated query over all resources in the profile container to look for entites with a given name. sld query https://mypod.org/profile/ \"select ?entity ?name where { ?entity foaf:name ?name }\" --federated Evaluating a query stored in a local resource over the resources in the profile container individually, including .acl , .acp and .meta resources. sld query --queryfile https://mypod.org/profile/ /path/to/sparql_query_file --all Edit \u00b6 The edit command enables the editing of remote resources using a local editor. The command will remain in standby until changes are saved, after which pressing a button in the shell will upload the resource to the Solid pod. Note: there currently is still a bug for longer edits, where saving the changes when a client session has expired will not be able to save the resource back to the pod. This should not be a problem when using client credentials. arguments \u00b6 Arguments: url Resource URL The url argument is target resource that will be edited. options \u00b6 Options: -e, --editor <path_to_editor_executable> Use custom editor -t, --touch Create file if not exists -v, --verbose Log all operations The --editor option enables the use of a specific local editor to modify the resource. The --touch option will create the resource if it does not exist yet. The --verbose option outputs operation logs. examples \u00b6 Editing a resource using the default editor. sld edit https://mypod.org/resource1 Creating and editing a resource using vs-code (code) sld edit --touch --editor code https://mypod.org/non_existing_resource Access \u00b6 The access command is used to manage resource access. This is explained in the access management section . Auth \u00b6 The auth command is used to manage authentication in Bashlib. This is explained in the authentication management section .","title":"Available Commands"},{"location":"documentation/cli/commands/#commands","text":"Bashlib provides a set of commands to manage resources and containers on your Solid pod. All examples make use of the abstraction sld as an alias for node bin/solid.js , and for all example we expect the user to be authenticated as documented in the Authentication section .","title":"Commands"},{"location":"documentation/cli/commands/#curl","text":"The curl command wraps the internal authenticated fetch function with functionality that mimics the curl command found on most linux shells.","title":"Curl"},{"location":"documentation/cli/commands/#arguments","text":"Arguments: url file to be fetched The url argument for this command is the URL of the resource that is the target of the curl command.","title":"arguments"},{"location":"documentation/cli/commands/#options","text":"Options: -v, --verbose Write out full response and all headers -H, --only-headers Only write out headers -m, --method <string> GET, POST, PUT, DELETE, ... -b, --body <string> The request body -F, --file <string> File containing the request body. Ignored when the --body flag is set. -h, --header <string> The request header. Multiple headers can be added separately. e.g. -h \"Accept: application/json\" -h \"...\" The --verbose option writes out all response headers for a request. The --only-headers option only writes out response headers and ignores the response body. The --method option sets the HTTP request method. The --body option sets the HTTP request body. The --file option allows passing the file contents as the body of the request. The --header option allows the setting of a request header. Setting multiple headers requires multiple --header options to be set.","title":"options"},{"location":"documentation/cli/commands/#examples","text":"A simple fetch request to a resource requesting a JSON-LD format sld curl https://mypod.org/resource --header \"Accept: application/ld+json\" A POST request using a file contents as request body sld curl -m POST -f /path/to/file https://mypod.org/resource","title":"examples"},{"location":"documentation/cli/commands/#list","text":"The ls command provides the listing of a container on a Solid pod.","title":"List"},{"location":"documentation/cli/commands/#arguments_1","text":"Arguments: url URL of container to be listed The url argument for this command is the URL of the container for which a listing is to be made. This will only work if the url targets a container. It is important to add the trailing slash of the container URL!","title":"arguments"},{"location":"documentation/cli/commands/#options_1","text":"Options: -a, --all List all files including acl files -f, --full List files with their full uri -l, --long List in long format -v, --verbose The --all option includes .meta , .acl and .acp files in the listing. The --full option writes full resource URIs, not only the resource name. The --long option writes the listing in a table format, including available information about size, latest modification, related metadata resource and related acl resource. The --verbose option shows warnings.","title":"options"},{"location":"documentation/cli/commands/#examples_1","text":"A listing of a container sld ls https://mypod.org/container/ A listing of a container showing all resources in a long format sld ls --long --all https://mypod.org/container/","title":"examples"},{"location":"documentation/cli/commands/#copy","text":"The cp command can copy resources between Solid pod locations, across Solid pods, or between the local file system and a Solid pod. If the source location is a container or directory, it will recursively copy the container and all sub-containers recursively copying the whole underlying resource tree, including empty containers. The default copying behavior ignores .meta , .acl and .acp resources, which can be changed using the --all flag. The copy command automatically copies the full recursive resource tree. At the moment this behavior cannot be altered. In terms of overriding resources, the default setting is that every time a resource is found to already exist, an interactive prompt is shown. This behavior can be altered either by the --never-override or the --override options.","title":"Copy"},{"location":"documentation/cli/commands/#arguments_2","text":"Arguments: src resource or container to be copied dst destination to copy file or directory to The src argument is the location of the resource or container to be moved. If the URL starts with http(s):// , the resource is assumed to be a remote resource, if not the resource is assumed to be local and matched with the local file system. The dst argument is the destination to which the source resource is to be copied. Similarly it uses the http(s):// prefix to decide if the location is local or remote. The default behavior ignores context resources such as .meta , .acl and .acp present in the directories. The --all flag ignores this behavior, though note that for authorization resources, as the target URIs are not edited, copying resources with these authorization resources does not imply they will result in the same access controls as the location they were copied from!","title":"arguments"},{"location":"documentation/cli/commands/#options_2","text":"Options: -a, --all Copy .acl files in recursive directory copies -o, --override Automatically override existing files -n, --never-override Automatically override existing files -v, --verbose Log all read and write operations The --all option includes .meta , .acl and .acp files in the listing. The --override option automatically overrides existing resources. The --never-override option automatically mitigates resource overrides. The --verbose option shows warnings.","title":"options"},{"location":"documentation/cli/commands/#examples_2","text":"Copying a local resource into a Solid pod container. sld cp /path/to/file https://mypod.org/container/ Copying a local resource to a specific remote resource sld cp /path/to/file.ttl https://mypod.org/container/resource.ttl Copy the contents of container 1 of alice's pod to container 2 of bob's pod. sld cp https://mypod.org/alice/container1/. https://mypod.org/bob/container2/ Copy the source container into the target container: https://mypod.org/bob/container2/container1/ . sld cp https://mypod.org/alice/container1/ https://mypod.org/bob/container2/ Copy a resource from a solid pod to the local filesystem sld cp https://mypod.org/container/resource.ttl ./resource.ttl","title":"examples"},{"location":"documentation/cli/commands/#move","text":"The mv command moves resources between Solid pod locations, across Solid pods, or between the local file system and a Solid pod. If the source location is a container or directory, it will recursively move the container and all sub-containers recursively copying the whole underlying resource tree, including empty containers. When moving from the local file system, files will not be deleted! The default copying behavior ignores .meta , .acl and .acp resources, which can be changed using the --all flag. The move command automatically moves the full recursive resource tree. At the moment this behavior cannot be altered. In terms of overriding resources, the default setting is that every time a resource is found to already exist, an interactive prompt is shown. This behavior can be altered either by the --never-override or the --override options.","title":"Move"},{"location":"documentation/cli/commands/#arguments_3","text":"Arguments: src resource or container to be moved dst destination of the move The src argument is the location of the resource or container to be moved. If the URL starts with http(s):// , the resource is assumed to be a remote resource, if not the resource is assumed to be local and matched with the local file system. The dst argument is the destination to which the source resource is to be copied. Similarly it uses the http(s):// prefix to decide if the location is local or remote. The default behavior ignores context resources such as .meta , .acl and .acp present in the directories. The --all flag ignores this behavior, though note that for authorization resources, as the target URIs are not edited, copying resources with these authorization resources does not imply they will result in the same access controls as the location they were copied from!","title":"arguments"},{"location":"documentation/cli/commands/#options_3","text":"Options: -a, --all Copy .acl files in recursive directory copies -o, --override Automatically override existing files -n, --never-override Automatically override existing files -v, --verbose Log all read and write operations The --all option includes .meta , .acl and .acp files in the listing. The --override option automatically overrides existing resources. The --never-override option automatically mitigates resource overrides. The --verbose option shows warnings.","title":"options"},{"location":"documentation/cli/commands/#examples_3","text":"Moving a local resource into a Solid pod container. This does not remove the local resource! sld mv /path/to/file https://mypod.org/container/ Moving a local resource to a specific remote resource. This does not remove the local resource! sld mv /path/to/file.ttl https://mypod.org/container/resource.ttl Move the contents of container1 into container2. This removes container 1. sld cp https://mypod.org/alice/container1/. https://mypod.org/bob/container2/ Move the source container into the target container. sld cp https://mypod.org/alice/container1/ https://mypod.org/bob/container2/container1/ Move a resource from a solid pod to the local filesystem sld cp https://mypod.org/container/resource.ttl ./resource.ttl","title":"examples"},{"location":"documentation/cli/commands/#remove","text":"The rm command can remove resources and/or directories from a remote Solid pod.","title":"Remove"},{"location":"documentation/cli/commands/#arguments_4","text":"Arguments: urls URL of container to be listed The urls parameter accepts a sequence of urls that need to be removed.","title":"arguments"},{"location":"documentation/cli/commands/#options_4","text":"Options: -r, --recursive Recursively removes all files in given container (.acl files are removed on resource removal) -v, --verbose Log all operations The --recursive flag must be set when removing container resources. This automatically also removes any contained .acl , .acp and .meta resources. The --verbose flag outputs operation logs.","title":"options"},{"location":"documentation/cli/commands/#examples_4","text":"Remove two resources sld rm https://mypod.org/resource1 https://mypod.org/resource2 Remove a container sld rm https://mypod.org/container/","title":"examples"},{"location":"documentation/cli/commands/#mkdir","text":"The mkdir command creates a new container on a remote Solid pod. The command automatically creates all parent directories that do not exist when specifying a subdirectory to create, and fails if the target container already exists.","title":"Mkdir"},{"location":"documentation/cli/commands/#arguments_5","text":"Arguments: url Container to start the search The url argument is the target container to be created.","title":"arguments"},{"location":"documentation/cli/commands/#options_5","text":"Options: -v, --verbose Log all operations The --verbose flag outputs operation logs.","title":"options"},{"location":"documentation/cli/commands/#examples_5","text":"Create a new container sld mkdir https://mypod.org/container/","title":"examples"},{"location":"documentation/cli/commands/#touch","text":"The touch command creates an empty resource at the target location. This cannot create containers, for this use the mkdir command. The content type of the created resource is derived from the content type flag or if that is missing from the file extension. If neither can be found an error is thrown.","title":"Touch"},{"location":"documentation/cli/commands/#arguments_6","text":"Arguments: url resource to be created The url argument is the target resource that is to be created.","title":"arguments"},{"location":"documentation/cli/commands/#options_6","text":"Options: -c, --content-type <string> Content type of the created resource -v, --verbose Log all operations the --content-type flag provides The --verbose flag outputs operation logs.","title":"options"},{"location":"documentation/cli/commands/#examples_6","text":"Create a new resource sld touch --content-type text/turtle https://mypod.org/container/resource","title":"examples"},{"location":"documentation/cli/commands/#tree","text":"The tree command provides a tree-structured listing of the target container and all its subcontainers.","title":"Tree"},{"location":"documentation/cli/commands/#arguments_7","text":"Arguments: url Base container to construct tree over The url argument is the target container for which the tree listing is to be made.","title":"arguments"},{"location":"documentation/cli/commands/#options_7","text":"Options: -a, --all Display .acl, .acp and .meta resources -f, --full Display full resource URIs -v, --verbose Log all operations The --all flag includes the .acl , .acp and .meta context resources in the command output. The --full flag displays the resulting resources using their full URIs The --verbose flag outputs operation logs.","title":"options"},{"location":"documentation/cli/commands/#examples_7","text":"Create tree listing on the root of a Solid pod. sld tree https://mypod.org/","title":"examples"},{"location":"documentation/cli/commands/#find","text":"The find command can be used to find resources based on their name.","title":"Find"},{"location":"documentation/cli/commands/#arguments_8","text":"Arguments: url Container to start the search filename Filename to match, processed as RegExp(filename) The url parameter is the container that forms the root of the resource tree in which the search is executed. The filename parameter is the filename to match, processed as a javascript RegExp.","title":"arguments"},{"location":"documentation/cli/commands/#options_8","text":"Options: -a, --all Match .acl, .acp and .meta files -f, --full Match full filename. -v, --verbose Log all operations The --all flag also matches access control and metadata files. The --full flag matches on and returns the full URIs of resources. The --verbose flag outputs operation logs.","title":"options"},{"location":"documentation/cli/commands/#examples_8","text":"Find a resource named card in the profile/ container. sld find http://mypod.org/profile/ card","title":"examples"},{"location":"documentation/cli/commands/#query","text":"The query command executes a SPARQL query over a target resource or container. In case a container is queried, all contained resources and subcontainers are recursively queried as well. The query itself is not federated, each query is individually evaluated over every resource. The following resources are included when querying: .ttl, .trig .nt, .nq, .jsonld, .rdf both on their resource extensions and their content type.. The Comunica engine is used for query evaluation. Note that only SELECT queries are supported!","title":"Query"},{"location":"documentation/cli/commands/#arguments_9","text":"Arguments: url Resource to query. In case of container recursively queries all contained files. query SPARQL query string | file path containing SPARQL query when -q flag is active The url argument is the target resource or container to query. Containers are queried recursively on all contained resources in its resource tree. The query argument is either a SPARQL query in quotes, or the path to a file containing a sparql query if the --queryfile flag has been set.","title":"arguments"},{"location":"documentation/cli/commands/#options_9","text":"Options: -a, --all Match .acl and .meta files -q, --queryfile Process query parameter as file path of SPARQL query -p, --pretty Pretty format -f, --full Return containing files using full filename. -v, --verbose Log all operations The --all flag includes .acl , .acp and .meta resources in the query targets. The --queryfile flag changes the query argument to a file path for a resource containing a SPARQL query. The --pretty flag outputs the results in a table. The --full flag gives the full resource URIs of where the matches were found. The --verbose outputs operation logs.","title":"options"},{"location":"documentation/cli/commands/#examples_9","text":"Evaluating a federated query over all resources in the profile container to look for entites with a given name. sld query https://mypod.org/profile/ \"select ?entity ?name where { ?entity foaf:name ?name }\" --federated Evaluating a query stored in a local resource over the resources in the profile container individually, including .acl , .acp and .meta resources. sld query --queryfile https://mypod.org/profile/ /path/to/sparql_query_file --all","title":"examples"},{"location":"documentation/cli/commands/#edit","text":"The edit command enables the editing of remote resources using a local editor. The command will remain in standby until changes are saved, after which pressing a button in the shell will upload the resource to the Solid pod. Note: there currently is still a bug for longer edits, where saving the changes when a client session has expired will not be able to save the resource back to the pod. This should not be a problem when using client credentials.","title":"Edit"},{"location":"documentation/cli/commands/#arguments_10","text":"Arguments: url Resource URL The url argument is target resource that will be edited.","title":"arguments"},{"location":"documentation/cli/commands/#options_10","text":"Options: -e, --editor <path_to_editor_executable> Use custom editor -t, --touch Create file if not exists -v, --verbose Log all operations The --editor option enables the use of a specific local editor to modify the resource. The --touch option will create the resource if it does not exist yet. The --verbose option outputs operation logs.","title":"options"},{"location":"documentation/cli/commands/#examples_10","text":"Editing a resource using the default editor. sld edit https://mypod.org/resource1 Creating and editing a resource using vs-code (code) sld edit --touch --editor code https://mypod.org/non_existing_resource","title":"examples"},{"location":"documentation/cli/commands/#access","text":"The access command is used to manage resource access. This is explained in the access management section .","title":"Access"},{"location":"documentation/cli/commands/#auth","text":"The auth command is used to manage authentication in Bashlib. This is explained in the authentication management section .","title":"Auth"},{"location":"documentation/typescript/authentication/","text":"","title":"Authentication"},{"location":"documentation/typescript/css-specific/","text":"css specific typescript \u00b6","title":"css specific typescript"},{"location":"documentation/typescript/css-specific/#css-specific-typescript","text":"","title":"css specific typescript"},{"location":"documentation/typescript/example-requests/","text":"Example requests ts \u00b6","title":"Example requests ts"},{"location":"documentation/typescript/example-requests/#example-requests-ts","text":"","title":"Example requests ts"},{"location":"documentation/typescript/metadata/","text":"Handling metadata \u00b6","title":"Handling metadata"},{"location":"documentation/typescript/metadata/#handling-metadata","text":"","title":"Handling metadata"},{"location":"documentation/typescript/overview/","text":"Overview Usage for Typescript \u00b6","title":"Overview Usage for Typescript"},{"location":"documentation/typescript/overview/#overview-usage-for-typescript","text":"","title":"Overview Usage for Typescript"}]}