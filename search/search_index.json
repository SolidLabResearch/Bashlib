{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to the Bashlib Homepage.</p> <p>Bashlib is a Command Line Interface for working with Solid Pods, made by  Ruben Dedecker at the KNoWS team at Ghent University. </p> <p>An introduction to quickly setting up a Community Solid Server instance and  interfacing with it using Bashlib is found in the tutorial section.</p> <p>Documentation on the tool and the available commands is found in the documentation section.</p> <p>Documentation may be incomplete in content and structure. Feel free to open a discussion and report incorrect information.</p>"},{"location":"tutorial/","title":"Bashlib Tutorial","text":"<p>This tutorial provides a quick setup of a Community Solid Server, and some useful interactions to manage resources on a created Solid pod.</p>"},{"location":"tutorial/#index","title":"Index","text":"<ul> <li>Bashlib Tutorial</li> <li>Index</li> <li>Setting up a Solid Server<ul> <li>Creating an account</li> </ul> </li> <li>Setting up Bashlib</li> <li>Bashlib-css<ul> <li>Creating a new Solid account + data pod</li> <li>Creating a Client Credentials token</li> <li>Authentication options</li> </ul> </li> <li>Bashlib-solid<ul> <li>Authentication</li> <li>Authenticate using Client Credentials token</li> <li>Interactive authentication</li> <li>No authentication</li> <li>Commands</li> <li>URL Prefixes</li> <li>fetch / cat</li> <li>list / ls</li> <li>copy / cp</li> <li>move / mv</li> <li>remove / rm</li> <li>mkdir</li> <li>touch</li> <li>find</li> <li>query</li> <li>perms</li> <li>edit</li> </ul> </li> <li>Examples<ul> <li>Creating a new pod and authentication token</li> <li>Setting up a profile image on your pod</li> </ul> </li> </ul>"},{"location":"tutorial/#setting-up-a-solid-server","title":"Setting up a Solid Server","text":"<p>To use Bashlib, we first explain how to setup your own local Solid Server on which  you can create your first Solid pod. In case you already have a Solid pod, feel free to skip this section. Alteratively, you may want to create a Solid pod on one of  the free Pod provider services. Note that when using a free provider, if something goes wrong you might not be able to recover your data, or that service may be relatively slow, as there are free and community hosted. Additionally, only server running the Community Solid Server or Inrupt Enterprise Solid Server versions will be able to make client credentials to authenticate automatically without needing an interactive browser session. A free CSS hosting service can be found here. A free ESS hosting service can be found here.</p> <p> To setup your own local Community Solid Server, we make use in this tutorial of the Community Solid Server.  The full tutorial can be found here. When you are done with the tutorial, you are free to remove the current folder to delete all created files!</p> <p>We use NPX to setup a CSS instance, and use a file config to store all data in the <code>data/</code> folder. Ideally execute the tutorial in an empty directory, so afterwards you can remove all tutorial data by removing this directory! <pre><code>npx @solid/community-server -c @css:config/file.json -f data/\n</code></pre></p> <p>Congratulations! Your own CSS instance is now running on localhost on port 3000! Keep this shell open during the tutorial! You can confirm this by browsing to <code>http://localhost:3000</code> in the browser, and you will be greeted with a setup screen.</p>"},{"location":"tutorial/#creating-an-account","title":"Creating an account","text":"<p>Now we will create an account and associated WebID on this local CSS instance. Navigating to <code>http://localhost:3000</code> in the browser, and you will be greeted with a setup screen. Press the Sign up for an account link to create an account on this local CSS instance. As this is a local instance, the email does not  really matter, as this is only used for authentication purposes and recovering a pod, but is never verified.</p> <p>For now, we make an example person Bob using his email <code>bob@test.com</code> and password <code>bob</code>. Next, we make a pod for this account by pressing the <code>Create pod</code> link! Here, we provide a pod name, for example <code>mydatapod</code>. Congratulations, you just created a new data pod at <code>http://localhost:3000/mydatapod/</code> and associated WebID at <code>http://localhost:3000/mydatapod/profile/card#me</code>!</p>"},{"location":"tutorial/#setting-up-bashlib","title":"Setting up Bashlib","text":"<p>With our Solid pod and WebID created, now it is time to setup Bashlib! <pre><code>git clone https://github.com/SolidLabResearch/Bashlib.git\ncd Bashlib\nbash setup.sh\n</code></pre> This code does the setup for Bashlib, and installs the available modules. Your <code>Bashlib</code> library is now setup and ready to use!</p>"},{"location":"tutorial/#bashlib-css","title":"Bashlib-css","text":"<p>To start with <code>Bashlib</code>, we first take a look at the <code>Bashlib-css</code> module. The <code>Bashlib-css</code> module gives a set of functions specifically designed for the Community Solid Server.  It handles functionality that is currently not included in the spec for Solid and may vary between implementations of the Solid specification. The CLI interface for <code>Bashlib-css</code> can be accessed here: <pre><code>node bashlib/css/bin/css.js\n</code></pre> optional: You can create an alias for this path so you do not have to write the full command every time. From here on, I will assume the alias <code>alias bashlib-css=\"node bashlib/css/bin/css.js\"</code> to be set!</p>"},{"location":"tutorial/#creating-a-new-solid-account-data-pod","title":"Creating a new Solid account + data pod","text":"<p>compatbility: CSSv2.0.0 - current</p> <p>A first function of the <code>Bashlib-css</code> module is the creation of a new Solid-account and accompanying data pod on a CSS instance. This serves as an to having to use the browser interface to register a new user, which can be found on http://localhost:3000/idp/register/.</p> <p>To create a new Solid account and pod, please execute the following code: <pre><code>bashlib-css create-pod \n</code></pre> An interactive prompt will be shown, requiring you to enter the information of your to-be-created Solid account.</p> <p>e.g.  <pre><code>? CSS instance base url   http://localhost:3000/\n? Pod and user name       Bob\n? User email              bob@test.edu\n? User password           bobIsTheBest123 \n</code></pre> This will result in the message that a pod for bob has been created succesfully on http://localhost:3000/bob/profile/card#me. If you navigate to this URL, you can now see the profile document of the newly created Solid account on the newly created Solid pod.</p> <p>If you do not want an interactive prompt, you can use the command with all options enabled  <pre><code>bashlib-css create-pod -b \"http://localhost:3000/\" -n Carol -e carol@test.edu -p carolIsTheBest123\n</code></pre> to automatically create a new pod without requiring manual interaction.</p>"},{"location":"tutorial/#creating-a-client-credentials-token","title":"Creating a Client Credentials token","text":"<p>compatbility: CSSv4.0.0 - current</p> <p>A second function of the <code>Bashlib-css</code> module is the creation of a Client Credentials token.  These tokens allow the user to authenticate without requiring user interaction by having them authenticate using a browser window. </p> <p>To create such a token, please execute the following code: <pre><code>bashlib-css create-token\n</code></pre></p> <p>This will again open an interactive prompt, requiring you to enter the information of the user registered on this Solid server for which you want to create the token: <pre><code>? Token name        bobs-auth-token\n? Pod baseuri       http://localhost:3000/\n? User email        bob@test.edu\n? User password     bobIsTheBest123\n? Token location    .tokens/.bobs-auth-token\n</code></pre></p> <p>You just succesfully created a Client Credentials token for Bob! You can inspect the newly created token using <code>cat .tokens/.bobs-auth-token</code> to verify this.</p> <p>This command can again be executed without an interactive prompt by providing values for all options: <pre><code>bashlib-css create-token -v -b \"http://localhost:3000/\" -n carols-auth-token -e carol@test.edu -p carolIsTheBest123 -o .tokens/.carols-auth-token\n</code></pre></p>"},{"location":"tutorial/#authentication-options","title":"Authentication options","text":"<p>The <code>Bashlib-css</code> module exposes a set of authentication options. These are however not exposed over the CLI interface, but are available in the Node.JS interface to use in your own Node.JS projects. The <code>Bashlib-solid</code> module makes use of these options to authenticate the user on the CLI.</p>"},{"location":"tutorial/#bashlib-solid","title":"Bashlib-solid","text":"<p>The <code>Bashlib-solid</code> module provides a set of functions to facilitate usage of and development for Solid from Node.JS and the CLI. The CLI interface for <code>Bashlib-solid</code> can be accessed here: <pre><code>node bashlib/solid/bin/solid.js\n</code></pre> optional: You can create an alias for this path so you do not have to write the full command every time. From here on, I will assume the alias <code>alias bashlib-solid=\"node bashlib/solid/bin/solid.js\"</code> to be set!</p>"},{"location":"tutorial/#authentication","title":"Authentication","text":"<p>Authentication in the <code>Bashlib-solid</code> module is done using the authentication options exposed by the <code>Bashlib-css</code> module.  We will quickly go over the available authentication options:</p>"},{"location":"tutorial/#authenticate-using-client-credentials-token","title":"Authenticate using Client Credentials token","text":"<p>compatbility: CSSv4 - current We can now use the client credentials token we made in the previous step to authenticate our user from the CLI. We can do this using the following authentication options: <pre><code> bashlib-solid --auth token &lt;command&gt; [options]\n</code></pre> Your identity provider is stored together with the token on your local filesystem, and does not have to be provided explicitly anymore.</p> <p>We can now use the authenticated fetch command on private resources: <pre><code>  bashlib-solid --auth token -t .tokens/.bobs-auth-token fetch http://localhost:3000/bob/profile/\n</code></pre></p> <p>note: This method of authentication is restricted to pods hosted on a Community Solid Server instance of v4.0.0 and later. If you have another provider, please use the interactive login option described below.</p>"},{"location":"tutorial/#interactive-authentication","title":"Interactive authentication","text":"<p>compatbility: all</p> <p>An alternative authentication method is the interactive login. This option provides the default Inrupt Node.JS authentication flow, and is compatible with all pods. The interactive authentication requires the user to manually authenticate using their browser. <pre><code> bashlib-solid --auth interactive --idp http://localhost:3000 &lt;command&gt; [options]\n</code></pre> We can now use the authenticated fetch command on private resources: <pre><code>  bashlib-solid --auth interactive --idp http://localhost:3000 fetch http://localhost:3000/bob/profile/\n</code></pre></p>"},{"location":"tutorial/#no-authentication","title":"No authentication","text":"<p>compatbility: all</p> <p>Finally, you can just make use of the library without authenticating yourself. This is the default option when no auth option is specified. <pre><code> bashlib-solid --auth none  &lt;command&gt; [options]\n</code></pre> We can now use fetch public resources as such: <pre><code>  bashlib-solid --auth none fetch http://localhost:3000/bob/profile/card\n</code></pre></p>"},{"location":"tutorial/#commands","title":"Commands","text":"<p>Now that we have created a Solid account and pod and learned how to authenticate, we will look at the available commands in <code>Bashlib-solid</code>. In this section, we will do a runthrough for all available commands, and how they can be used. These commands will help you see solid not only as a Web technology, but as something you can easily include in existing workflows, while enabling ease of access and sharing of resources in between systems and users. We use the alias <code>alias bashlib-auth = \"node bashlib/solid/bin/solid.js --auth token -t .tokens/.bobs-auth-token\"</code> as a shortcut to make authenticated requests from here. In case you use another authentication method feel free to choose your own alias!</p>"},{"location":"tutorial/#url-prefixes","title":"URL Prefixes","text":"<p>All commands support URL prefixes for all URL parameters. Prefixes only work when the user is authenticated! Accepted prefixes are:   - <code>webid:</code>  - The user WebID   - <code>inbox:</code>  - The user inbox (if available)    - <code>root:</code>   - The user storage root (only found if the WebID is inside te data pod)   - <code>base:</code>   - Identical to <code>root:</code></p> <p>For our user bob, we can now write the following url <pre><code>  base:/public/resource1.ttl\n</code></pre> to define the resource located at <pre><code>  http://localhost:3000/bob/public/resource1.ttl\n</code></pre> From here on out, we will make use of the prefixes, so feel free to authenticate with your own data pod, and follow the steps on your own pod environment.</p>"},{"location":"tutorial/#fetch-cat","title":"fetch / cat","text":"<p>The first command is the <code>fetch</code> command, with its twin the <code>cat</code> command. Both commands have an identical result, of fetching and displaying the remote resource to <code>stdout</code>,  but the <code>fetch</code> command can take additional flags to pass custom headers and more.</p> <p>To fetch the user webId, we can now call the following function: <pre><code>  bashlib-auth fetch webid:\n</code></pre> As the authenticated user is Bob (see the alias we created), we just fetched bob's WebID. Additional options can be found by calling the help function. <pre><code>  bashlib-auth fetch --help\n</code></pre> If we want to fetch the file in an other RDF format, we can add custom headers: <pre><code>  bashlib-auth fetch -h \"Accept: application/ld+json\" webid:\n</code></pre></p>"},{"location":"tutorial/#list-ls","title":"list / ls","text":"<p>The <code>list</code> or <code>ls</code> command displays a listing of a container on a Solid pod. The url argument should end in a <code>/</code> as it must be a container. Options can be discovered using the help command. </p> <p>To list the resources in our profile folder, we use the following command: <pre><code>  bashlib-auth ls base:/profile/\n</code></pre></p> <p>By looking at the help function, we now will add the <code>--all</code> flag to also include any .acl files in the directory, and the <code>--long</code> flag to show a table overview of the result</p> <pre><code>  bashlib-auth ls --all --long base:/profile/\n</code></pre>"},{"location":"tutorial/#copy-cp","title":"copy / cp","text":"<p>The <code>copy</code> or <code>cp</code> command copies resources form and to both the local filesystem and a data pod. Make sure you have read permissisons for the source location and write permissions for the destination location when they are on a pod.</p> <p>We will demonstrate the copy command by uploading a profile image form our local disk. If you have chosen a local image file, we can now upload this to our pod as follows: <pre><code> bashlib-auth cp contacts.ttl base:/profile/\n</code></pre> This copies the <code>contacts.ttl</code> file to the container at the url <code>http://localhost:3000/bob/profile/</code>, and creates the contacts.ttl resource in this container. We can now request the copied file as follows: <pre><code> bashlib-auth cat base:/profile/contacts.ttl\n</code></pre> We can also copy resources from one location on our pod to another location as follows: <pre><code> bashlib-auth cp base:/profile/contacts.ttl base:/test/\n</code></pre> and can now fetch the resource at the target location <pre><code> bashlib-auth fetch base:/test/contacts.ttl\n</code></pre> We see that the missing containers were automatically created.</p> <p>Notes: - Directories are always copied recursively as a default. - Copying files without an extension from the data pod will result in $., with the extension value based on the file contenttype. - Copying a file <code>card$.ttl</code> to your data pod will result in a file <code>card</code> with a content type of <code>text/turtle</code>. - Copying a file to a directory will place that file with the given filename in the destination directory. - When directly copying an .acl file, the <code>--all</code> flag must not be set.  - Missing containers are automatically created."},{"location":"tutorial/#move-mv","title":"move / mv","text":"<p>The <code>move</code> or <code>mv</code> command moves resources between different locations on a data pod or between data pods. It is equal to a <code>cp</code> operation followed by a <code>rm</code> operation on the source.  Make sure that the correct permissions are set to read and remove the source resources, and write to the destination resources.</p> <p>In the last section, we made a <code>contacts.ttl</code> resource in our <code>base:/test/</code> container.  We can now move the test resource we just made as a demonstration: <pre><code>bashlib-auth mv base:/test/contacts.ttl base:/test/demo_contacts.ttl\n</code></pre></p>"},{"location":"tutorial/#remove-rm","title":"remove / rm","text":"<p>The <code>remove</code> or <code>rm</code> command removes resources from a data pod.</p> <p>With this command, we can now remove the <code>demo_contacts.ttl</code> file in the <code>/test</code> folder: <pre><code>bashlib-auth rm base:/test/demo_contacts.ttl\n</code></pre> If we now look at the container listing: <pre><code>bashlib-auth ls base:/test/\n</code></pre> we see that the resource has been removed. We can also remove the container now as follows: <pre><code>bashlib-auth rm base:/test/\n</code></pre> To remove a container together with the contained resources, the <code>-r, --recursive</code> flag has to be set.</p>"},{"location":"tutorial/#mkdir","title":"mkdir","text":"<p>The <code>mkdir</code> command creates a target container.</p> <p><pre><code>bashlib-auth mkdir base:/Pictures/\n</code></pre> creates a new <code>Pictures/</code> container in the root of your pod.</p>"},{"location":"tutorial/#touch","title":"touch","text":"<p>The <code>touch</code> command creates a target resource in a container.</p> <p><pre><code>bashlib-auth touch base:/test.txt\n</code></pre> creates a new resource <code>test.txt</code> in the root of your pod.</p>"},{"location":"tutorial/#find","title":"find","text":"<p>The <code>find</code> command enables you to find specific files in a given container based on a given filename regex.</p> <p>If we want to find where our profile card is located on our data pod, we can use the following command: <pre><code>bashlib find --full base: card\n</code></pre> This command looks to match all found files in the <code>base:</code> container with the given filename match <code>card</code>. We use the <code>--full</code> flag to match with and display the full url of the found resources.</p>"},{"location":"tutorial/#query","title":"query","text":"<p>The <code>query</code> command is a convenience command that lets the user query one file or all files in a container based on a given SPARQL query.</p> <p>To return all triples from our WebID, we can use the following command: <pre><code>bashlib-auth query webid: \"Select * WHERE { ?s ?p ?o . }\"\n</code></pre></p> <p>This command also works on containers to recursively query all contained resources. To test this, we first make a new file containing a SPARQL query: <pre><code>echo \"Select * WHERE { ?s ?p ?o . }\" &gt; queryFile.txt\n</code></pre> Now, we can use this query to get all triples of all files on our data pod. We use the <code>--pretty</code> flag to receive the results in a table format: <pre><code>bashlib-auth query -q -p base: queryFile.txt\n</code></pre></p>"},{"location":"tutorial/#perms","title":"perms","text":"<p>The <code>perms</code> command provides three operations to list, edit and delete permissions for a resource on a Solid pod. This command only works for pods implementing the WAC protocols. Pods implementing the ACP protocol (Inrupt) are currently not supported.</p> <p>listing</p> <p>To list the permissions of your profile resource, we can use the following command: <pre><code>bashlib-auth perms list webid:\n</code></pre> Here, we see the permissions written out for all agents, groups and the public for the given resource. This also works for containers. The following command prints the permissions of the pod root in a table format: <pre><code>bashlib-auth perms list --pretty base:\n</code></pre></p> <p>editing note: The editing of permissions for containers and other resources is exactly the same.</p> <p>To demonstrate the editing of permissions, we will first create a <code>Private</code> and <code>Public</code> folder on our pod. <pre><code>bashlib-auth mkdir base:/Private/\nbashlib-auth mkdir base:/Public/\n</code></pre></p> <p>We start by setting the permissions for the <code>base:/Public/</code> container to be publicly readable, and make this the default for all contained resources (only an option for WAC). <pre><code>bashlib-auth perms edit base:/Public/ p=rd\n</code></pre></p> <p>When we now list the resource permissions, we see that public permissions are set to <code>read</code> and <code>default</code>. <pre><code>bashlib-auth perms list --pretty base:/Public/\n</code></pre></p> <p>Now we want to make sure the public cannot read or interact in any way with out <code>Private</code> container. For this we set public permissions to be nothing. However, we want our currently authenticated user to have full permissions in this container and all contained resources as a default (append permissions are implicitly set by giving write permissions): <pre><code>bashlib-auth perms edit base:/Private/ p= u=rwcd\n</code></pre></p> <p>When we now list the resource permissions, we see that no public permissions are set. We also see that the permissions are NOT inherited, meaning they are have been set for the resource successfully. <pre><code>bashlib-auth perms list --pretty base:/Private/\n</code></pre></p> <p>Finally, we want to give permission to our friend with the WebID <code>https://my.friends.pod/profile/card#me</code> to read and write in our <code>Private</code> container. For this we use the following command: <pre><code>bashlib-auth perms edit base:/Private/ https://my.friends.pod/profile/card#me=rw\n</code></pre></p> <p>When we now list the resource permissions, we see that our friend <code>https://my.friends.pod/profile/card#me</code> had received read, write and append (implicitly given through write) permissions over our <code>Private</code> container. <pre><code>bashlib-auth perms list --pretty base:/Private/\n</code></pre></p> <p>deleting Finally, we can also delete resource permissions. We can remove the permissions set for a given resource.</p> <p>To remove the permissions set for the public container, we can use the following command: <pre><code>bashlib-auth perms delete base:/Public/\n</code></pre></p> <p>If we now list the permissions for this container, we see that all current permissions are inherited from the parent container, as the permissions for the <code>Public</code> container have been deleted. <pre><code>bashlib-auth perms list --pretty base:/Public/\n</code></pre></p>"},{"location":"tutorial/#edit","title":"edit","text":"<p>The edit command is a helper command to quickly allow you to edit resources on your pod. The command takes the url of a resource (cannot be a container), copies the resource to your local filesystem and opens the resource with your given or your default editor.</p> <p>We will now edit the file <code>base:/Public/test.txt</code> with our local vim editor.  If you do not have vim installed, please select your prefered editor or do not use the flag to use the default system editor. Using the <code>--touch</code> flag, we will create a new file if the resource does not exist yet. <pre><code>bashlib-auth edit --editor vim --touch base:/Public/test.txt\n</code></pre></p> <p>Now your editor will open with an empty file. You can now edit the file to contain a string of text, and then save the file in your editor. On exiting the editor, and returning to the terminal, you must press any button to continue. Now, the edited resource will be copied from your local filesystem to its location on the data pod, and be removed from the local filesystem.</p> <p>If we now look at the created file <pre><code>bashlib-auth cat base:/Public/test.txt\n</code></pre> we see that the file has been created and contains the text that was written in the editor.</p>"},{"location":"tutorial/#examples","title":"Examples","text":"<p>In this section, we will go over some quick examples of how the CLI interface of <code>Bashlib</code> can be used to do some common tasks. For all examples, we will make use of the following aliases:</p> <ul> <li>bashlib-css - <code>alias bashlib-css=\"node bashlib/css/bin/css.js\"</code></li> <li>bashlib-solid - <code>alias bashlib-auth=\"node bashlib/solid/bin/solid.js\"</code></li> <li>bashlib-auth - <code>alias bashlib-auth=\"node bashlib/solid/bin/solid.js\" --auth &lt;your_preferred_auth_option&gt;</code></li> </ul>"},{"location":"tutorial/#creating-a-new-pod-and-authentication-token","title":"Creating a new pod and authentication token","text":"<p>compatibility CSSv4 - current</p> <p>First, we need to have a Community Solid Server instance running. More info on how to setup a Community Solid Server can be found here.</p> <p>First, we create a new pod on our running CSS instance. For this we run the <code>create-pod</code> command: <pre><code>bashlib-css create-pod \n</code></pre> and we fill in the required information: <pre><code>? CSS instance base url   your CSS server baseURL, e.g. http://localhost:3000/\n? Pod and user name       the name for your pod\n? User email              the email address to login to the pod\n? User password           the password to login to the pod\n</code></pre></p> <p>On completion, you will receive the following message <pre><code>Pod for &lt;name&gt; created succesfully on &lt;baseurl&gt;/&lt;name&gt;/profile/card#me\n</code></pre> This <code>&lt;baseurl&gt;/&lt;name&gt;/profile/card#me</code> is the WebID of your newly created Solid account.</p> <p>Now that we have created a Solid account, we will create an authentication token we can use to authenticate to our pod from the CLI. For this, we use the <code>create-token</code> command. <pre><code>bashlib-css create-token\n</code></pre> and fill in the required information: <pre><code>? Token name        the name of the token e.g. my-cli-auth-token\n? Pod baseuri       your CSS server baseURL, e.g. http://localhost:3000/\n? User email        the email address to login to the pod\n? User password     the password to login to the pod\n? Token location    you can choose a custom location or leave this blank to default to ~/.solid/.css-auth-token\n</code></pre></p> <p>This creates a client-credentials-token you can use to authenticate at the <code>Token location</code> (default is <code>~/.solid/.css-auth-token</code>). With this token, we can now authenticate our commands, such as listing the permissions of our WebID profile resource.</p> <p>In case the default location was used to store the token, we use the following command <pre><code>bashlib-solid --auth \"token\" perms list --pretty webid:\n</code></pre> In case a custom token location was given, we pass the <code>-t</code> flag to indicate where the token can be found: <pre><code>bashlib-solid --auth \"token\" -t &lt;path_to_token&gt; perms list --pretty webid:\n</code></pre></p> <p>You can alias this to have a quick and easy way to use <code>Bashlib</code> from the cli (-t option only required if the default storage location was not used): <pre><code>alias bashlib-auth=`bashlib-solid --auth \"token\" -t &lt;path_to_token&gt;\n</code></pre> From here on, you can use this alias to make all your commands authenticated: <pre><code>bashlib-auth perms list --pretty webid:\n</code></pre></p>"},{"location":"tutorial/#setting-up-a-profile-image-on-your-pod","title":"Setting up a profile image on your pod","text":"<p>Here we will discuss how we can quickly add a profile image to our profile, and store it on our pod. For this, we first need to choose a profile image. Say we have a nice image we want to use for this at <code>~/Pictures/my_nice_picture.png</code>.</p> <p>First, we copy the image to our pod at the location <code>base:/profile/img.png</code>. <pre><code>bashlib-auth cp ~/Pictures/my_nice_picture.png base:/profile/img.png\n</code></pre></p> <p>Next, we will make this image publicly readable, so everyone can see your profile picture. If you do not like this, feel free to only add read permissions for specific WebIDs. <pre><code>bashlib-auth perms edit base:/profile/img.png p=r\n</code></pre></p> <p>With our image uploaded to our pod and made public, we will now have to edit our profile document to link the new profile image to our WebID. <pre><code>bashlib-auth edit webId:\n</code></pre> This will open our profile document in our default editor. We now add the following line to the document (replace <code>imageurl</code> with the url of the newly uploaded image): <pre><code>&lt;#me&gt; &lt;http://xmlns.com/foaf/0.1/img&gt; &lt;imageurl&gt; .\n</code></pre></p> <p>Now save the document, and exit the editor. Press on any key to continue, and your profile document is now updated with a link to your newly added profile image </p> <p>Congratulations, you just set your profile image.</p>"},{"location":"contributing/making-changes/","title":"Pull Requests","text":""},{"location":"documentation/overview/","title":"Documentation Overview","text":"<p>The Bashlib command line interface provides straightforward commands to interact with your Solid pod.  It can be useful both for personal use, setting up small workflows or quick demonstrations of proof of concepts. The authentication options enable quick switching between WebIDs and Solid Pods.  As not everything is optimized for performance, operations that target many resources or few but large resources  may not be performant enough for some use-cases, as the internal resource management does not make use of streaming.</p> <p> To login and manage authentication info for Bashlib, navigate to the authentication management section.  For an overview of the available commands, their options and code example, navigate to the available commands section.  To view and manage access to resources, navigate to the access management section.  To see how to use aliases to speed up your flow, navigate to the using aliases section.</p>"},{"location":"documentation/cli/access/","title":"Access Management","text":"<p>The <code>access</code> command is used to manage access of resources on a Solid pod. Solid has two competing authorization proposals, Web Access Controls that use <code>.acl</code> resources,  and Access Control Policies that use <code>.acp</code> resources.</p> <p>Bashlib implements full support for the management of WAC resources, and partial support for the management of ACP resources using the Inrupt universalAccess libraries.  The access command has thee subcommands: <code>list</code>, <code>set</code> and <code>delete</code></p>"},{"location":"documentation/cli/access/#list","title":"List","text":"<p>The <code>list</code> subcommand provides a listing of all access information for the targeted (container) resource.</p>"},{"location":"documentation/cli/access/#arguments","title":"arguments","text":"<p><pre><code>Arguments:\n  url            Resource URL\n</code></pre> The <code>url</code> argument is the target (container) resource for which access is to be listed.</p>"},{"location":"documentation/cli/access/#options","title":"options","text":"<p><pre><code>Options:\n  --acl          Displays ACL specific information such as group and default access\n  -p, --pretty   Pretty format\n  -v, --verbose  Log all operations\n</code></pre> The <code>--acl</code> option displays information specific to <code>.acl</code> resources,  such as <code>default</code> access indicating that the authorization is also enforced on child resources without their own <code>.acl</code> file or <code>inhereted</code> access indicating that the access rules are derived from the default access of a parent resource.  The <code>--pretty</code> option outputs the information in a table format  The <code>--verbose</code> option outputs operation logs.</p>"},{"location":"documentation/cli/access/#examples","title":"examples","text":"<p>List the pod root access in a pretty format <pre><code>sld access list --pretty https://mypod.org/\n</code></pre></p>"},{"location":"documentation/cli/access/#set","title":"Set","text":"<p>The <code>set</code> subcommand is used to edit resource access.</p>"},{"location":"documentation/cli/access/#arguments_1","title":"arguments","text":"<p><pre><code>Arguments:\n  url            Resource URL\n  permissions    Permission format when setting permissions. \n        Format according to id=[a][c][r][w]. \n        For public permissions please set id to \"p\". \n        For the current authenticated user please set id to \"u\".\n        For specific agents, set id to be the agent webid.\n</code></pre> The <code>url</code> argument is the target (container) resource for editing access rules.  The <code>permissions</code> argument is a formatted string containing the identifier for which rules are defined, and the associated permissions that are to be set for the given identifier. Using <code>p</code> as the identifier targets public permissions and using <code>u</code> as the identifier targets the current WebID of the authenticated Bashlib session.  The <code>a</code> is append rights, allowing PATCH operations to be made.  The <code>c</code> is control rights, allowing the editing of access controls for a resource (for ACP this includes both readControl and writeControl)  The <code>r</code> is read rights, allowing a GET request to a resource.  The <code>p</code> is write rights. For a resource this allows it to be overwritten using a PUT request.  For a container this allows resources to be added using both PUT and POST requests.</p>"},{"location":"documentation/cli/access/#options_1","title":"options","text":"<p><pre><code>Options:\n  --acl          Enables ACL specific operations --default and --group\n  --default      Set the defined permissions as default (only in --acl mode)\n  --group        Process identifier as a group identifier (only in --acl mode)\n  -v, --verbose  Log all operations\n  -h, --help     display help for command\n</code></pre> The <code>--acl</code> option enables the default and group flags to be used, which are WAC specific operations.  The <code>--default</code> option makes the current access rules default for all children resources when defined on a container. Only available in <code>--acl</code> mode.  The <code>--group</code> option indicates that the identifier represents a group identifier. Only available in <code>--acl</code> mode.  The <code>--verbose</code> option outputs operation logs.</p>"},{"location":"documentation/cli/access/#examples_1","title":"examples","text":"<p>Setting public read permissions for a resource <pre><code>sld access set https://mypod.org/resource p=r\n</code></pre></p> <p>Giving access to alice to write to a container <pre><code>sld access set http://mypod.org/container/ http://people.org/alice/webid=w\n</code></pre></p>"},{"location":"documentation/cli/access/#delete","title":"Delete","text":"<p>The <code>delete</code> subcommand is only available for WAC based pods using <code>.acl</code> resources. Note that removing a resource using the <code>rm</code> command also removes the associated <code>.acl</code> resource on the CSS automatically.</p>"},{"location":"documentation/cli/access/#arguments_2","title":"arguments","text":"<p><pre><code>Arguments:\n  url            Resource URL\n</code></pre> The <code>url</code> argument is the target <code>.acl</code> resource that will be deleted.</p>"},{"location":"documentation/cli/access/#options_2","title":"options","text":"<p><pre><code>Options:\n  -v, --verbose  Log all operations\n</code></pre> The <code>--verbose</code> option output operation logs.</p>"},{"location":"documentation/cli/access/#example","title":"example","text":"<p>Removing an acl resource. <pre><code>sld access remove https://mypod.org/resource.acl\n</code></pre></p>"},{"location":"documentation/cli/access/#examples_2","title":"examples","text":""},{"location":"documentation/cli/aliases/","title":"Using aliases","text":"<p>The current implementation of using aliases is weak, and may be changed in subsequent releases. Alias management is a potential future addition.</p>"},{"location":"documentation/cli/aliases/#base","title":"Base","text":"<p>The <code>base:</code> alias indicates the root of your Solid pod. Executing a command using this alias will target the root of your pod, if it is known. This value is taken from the <code>pim:storage</code> triple in the WebID. In case multiple storage locations are available, results in using this may be inconsistent.  The following command wil make a listing of the root of the Solid pod of the current user. <pre><code>sld ls base:/\n</code></pre></p>"},{"location":"documentation/cli/aliases/#webid","title":"WebID","text":"<p>The <code>webid:</code> alias will target the user WebID.  The following command wil retrieve the user WebID. <pre><code>sld curl webid:\n</code></pre></p>"},{"location":"documentation/cli/aliases/#inbox","title":"Inbox","text":"<p>The <code>inbox:</code> alias targets the user inbox, if known. This value is taken from the <code>ldp:inbox</code> triple in the WebID.  The following command queries the inbox for events <pre><code>sld query inbox:/ \"Select ?event where { ?event a &lt;http://example.org/Event&gt; }\n</code></pre></p>"},{"location":"documentation/cli/authentication/","title":"Authentication Management","text":"<p>The Bashlib CLI interface provides multiple options for authentication management. It enables interactive login flows using the browser, that work with any Solid pod server. Additionally, it includes the client credentials flow to generate authentication tokens without needing a browser login both for the Community Solid Server v7 and the Enterprise Solid Server from Inrupt.</p> <p> All examples make use of the abstraction <code>sld</code> as an alias for <code>node bin/solid.js</code>, </p>"},{"location":"documentation/cli/authentication/#enforcing-specific-authorization-flows","title":"Enforcing specific authorization flows","text":"<p>When setting up test flows on Solid, it might be interesting to force a specific authentication flows to be used. For this, the <code>--auth</code> option can be set on the bashlib program as such:] <pre><code>sld --auth interactive\n</code></pre> This examples forces authentication via an interactive browser session. Other options are <code>token</code> for only token based authentication, <code>none</code> for no authentication and <code>request</code> to dynamically choose an authentication option during use, which is the default. The <code>--port</code> option can be changed to change the port of the local service that is setup to manage interactive authentication flows with the browser.</p>"},{"location":"documentation/cli/authentication/#auth-command","title":"Auth command","text":"<p>The <code>auth</code> command contains all functionality to manage authentication options and create client credentials tokens.</p>"},{"location":"documentation/cli/authentication/#set","title":"Set","text":"<p>The <code>set</code> subcommand is used to manage the authentication session for Bashlib. It provides the ability to set a specific WebID as an argument, or if no argument is given starts an interactive selection dialog to change the active WebID.</p>"},{"location":"documentation/cli/authentication/#arguments","title":"arguments","text":"<p><pre><code>Arguments:\n  webid       Set active WebID directly, without requiring manual selection.\n</code></pre> The <code>webid</code> argument directly sets the session to the provided WebID value.</p>"},{"location":"documentation/cli/authentication/#examples","title":"examples","text":"<p>Interactive session management <pre><code>sld auth set\n</code></pre></p> <p>Setting a specific active WebID <pre><code>sld auth set https://people.org/alice/webid\n</code></pre></p>"},{"location":"documentation/cli/authentication/#show","title":"Show","text":"<p>The <code>show</code> subcommand shows the current authentication session. It shows the WebId, if there is an active authentication session and if a client credential token is available.</p>"},{"location":"documentation/cli/authentication/#options","title":"options","text":"<p><pre><code>Options:\n  -p, --pretty  Show listing in table format.\n</code></pre> The <code>--pretty</code> option displays the result in a table formate.</p>"},{"location":"documentation/cli/authentication/#examples_1","title":"examples","text":"<pre><code>sld auth show\n</code></pre>"},{"location":"documentation/cli/authentication/#clear","title":"Clear","text":"<p>The <code>clear</code> subcommand clears the current authentication session and active WebID. It does not remove any stored authentication information.</p>"},{"location":"documentation/cli/authentication/#examples_2","title":"examples","text":"<pre><code>sld auth clear\n</code></pre>"},{"location":"documentation/cli/authentication/#list","title":"List","text":"<p>The <code>list</code> subcommand lists the stored authentication information. It shows the WebIds, if there is an active authentication session and if a client credential token is available.</p>"},{"location":"documentation/cli/authentication/#options_1","title":"options","text":"<p><pre><code>Options:\n  -p, --pretty  Show listing in table format.\n</code></pre> The <code>--pretty</code> option displays the result in a table formate.</p>"},{"location":"documentation/cli/authentication/#examples_3","title":"examples","text":"<pre><code>sld auth list\n</code></pre>"},{"location":"documentation/cli/authentication/#remove","title":"Remove","text":"<p>The <code>remove</code> subcommand provides the ability to remove authentication information from Bashlib. It provides an interactive menu if no argument is given, or can remove information for specific WebIDs or all information directly via the CLI arguments.</p>"},{"location":"documentation/cli/authentication/#arguments_1","title":"arguments","text":"<p><pre><code>Arguments:\n  string      webid | all\n</code></pre> The command has an optional parameter.  When passing the argument string <code>all</code>, all authentication information is removed. Passing a specific WebID removes all authentication information tied to that WebID. If no argument is passed, an interactive CLI menu is provided.</p>"},{"location":"documentation/cli/authentication/#examples_4","title":"examples","text":"<p>Opening the interactive menu <pre><code>sld auth remove\n</code></pre></p> <p>Removing all authentication information <pre><code>sld auth remove all\n</code></pre></p> <p>Removing a specific WebID <pre><code>sld auth remove https://people.org/alice/webid\n</code></pre></p>"},{"location":"documentation/cli/authentication/#create-token-css","title":"Create Token (CSS)","text":"<p>The token creation is divided in two subcommands,  one for the Community Solid Server and one for the Inrupt Enterprise Solid Server, as both have a different approach to token generation for client applications.</p> <p>The <code>create-token-css</code> command creates a client credentials token for pods hosted on a Community Solid Server version 7. The authentication options can be passed both as command line arguments, or in an interactive dialog if they are not provided through the CLI options. The interactive creation menu will ask to use the WebID of the current session to create a token when available.</p>"},{"location":"documentation/cli/authentication/#options_2","title":"options","text":"<p><pre><code>Options:\n  -w, --webid &lt;string&gt;     User WebID\n  -n, --name &lt;string&gt;      Token name\n  -e, --email &lt;string&gt;     User email\n  -p, --password &lt;string&gt;  User password\n  -v, --verbose            Log actions\n  -h, --help               display help for command\n</code></pre> The <code>--webid</code> option is the WebID for which the token is created.  The <code>--name</code> option is the name of the token (only important for token management).  The <code>--email</code> option is the email that was used to create the account tied to the WebID.  The <code>--password</code> option is the password tied to the account.  the <code>--verbose</code> option outputs operation logs.</p>"},{"location":"documentation/cli/authentication/#examples_5","title":"examples","text":"<p>Open interactive dialog to create token <pre><code>sld auth create-token-css\n</code></pre></p>"},{"location":"documentation/cli/authentication/#create-token-ess","title":"Create Token (ESS)","text":"<p>The <code>create-token-ess</code> command creates a client credentials token for pods hosted on an Inrupt Enterprise Solid Server. The authentication options can be passed both as command line arguments, or in an interactive dialog if they are not provided through the CLI options. The interactive creation menu will ask to use the WebID of the current session to create a token when available.  The Inrupt token generation relies on the registration of applications via their  application registration service. After registering Bashlib, an <code>id</code> and <code>secret</code> value will be shown. These values need to be provided to this command to be able to automatically create authenticated sessions without needing interactive login.</p>"},{"location":"documentation/cli/authentication/#options_3","title":"options","text":"<p><pre><code>Options:\n  -w, --webid &lt;string&gt;     User WebID\n  -i, --id &lt;string&gt;        application registration id\n  -s, --secret &lt;string&gt;    application registration secret\n  -v, --verbose            Log actions\n  -h, --help               display help for command\n</code></pre> The <code>--webid</code> option is the WebID for which the token is created.  The <code>--id</code> option is the <code>id</code> value retrieved from the registration flow described above.  The <code>--secret</code> option is the <code>secret</code> value retrieved from the registration flow described above.  the <code>--verbose</code> option outputs operation logs.</p>"},{"location":"documentation/cli/authentication/#examples_6","title":"examples","text":"<p>Open interactive dialog to create token <pre><code>sld auth create-token-ess\n</code></pre></p>"},{"location":"documentation/cli/commands/","title":"Commands","text":"<p>Bashlib provides a set of commands to manage resources and containers on your Solid pod. All examples make use of the abstraction <code>sld</code> as an alias for <code>node bin/solid.js</code>,  and for all example we expect the user to be authenticated as documented in the Authentication section.</p>"},{"location":"documentation/cli/commands/#curl","title":"Curl","text":"<p>The <code>curl</code> command wraps the internal authenticated <code>fetch</code> function with functionality that mimics the curl command found on most linux shells.</p>"},{"location":"documentation/cli/commands/#arguments","title":"arguments","text":"<p><pre><code>Arguments:\n  url                    file to be fetched\n</code></pre> The <code>url</code> argument for this command is the URL of the resource that is the target of the curl command.</p>"},{"location":"documentation/cli/commands/#options","title":"options","text":"<p><pre><code>Options:\n  -v, --verbose          Write out full response and all headers\n  -H, --only-headers     Only write out headers\n  -m, --method &lt;string&gt;  GET, POST, PUT, DELETE, ...\n  -b, --body &lt;string&gt;    The request body\n  -F, --file &lt;string&gt;    File containing the request body. Ignored when the --body flag is set.\n  -h, --header &lt;string&gt;  The request header. Multiple headers can be added separately. e.g. -h \"Accept: application/json\" -h \"...\"\n</code></pre> The <code>--verbose</code> option writes out all response headers for a request.  The <code>--only-headers</code> option only writes out response headers and ignores the response body.  The <code>--method</code> option sets the HTTP request method.  The <code>--body</code> option sets the HTTP request body.  The <code>--file</code> option allows passing the file contents as the body of the request.   The <code>--header</code> option allows the setting of a request header. Setting multiple headers requires multiple <code>--header</code> options to be set.</p>"},{"location":"documentation/cli/commands/#examples","title":"examples","text":"<p>A simple fetch request to a resource requesting a JSON-LD format <pre><code>sld curl https://mypod.org/resource --header \"Accept: application/ld+json\"\n</code></pre></p> <p>A POST request using a file contents as request body <pre><code>sld curl -m POST -f /path/to/file https://mypod.org/resource\n</code></pre></p>"},{"location":"documentation/cli/commands/#list","title":"List","text":"<p>The <code>ls</code> command provides the listing of a container on a Solid pod.</p>"},{"location":"documentation/cli/commands/#arguments_1","title":"arguments","text":"<p><pre><code>Arguments:\n  url            URL of container to be listed\n</code></pre> The <code>url</code> argument for this command is the URL of the container for which a listing is to be made.  This will only work if the url targets a container. It is important to add the trailing slash of the container URL!</p>"},{"location":"documentation/cli/commands/#options_1","title":"options","text":"<p><pre><code>Options:\n  -a, --all      List all files including acl files\n  -f, --full     List files with their full uri\n  -l, --long     List in long format\n  -v, --verbose  \n</code></pre> The <code>--all</code> option includes <code>.meta</code>, <code>.acl</code> and <code>.acp</code>  files in the listing.  The <code>--full</code> option writes full resource URIs, not only the resource name.  The <code>--long</code> option writes the listing in a table format, including available information about size, latest modification, related metadata resource and related acl resource.  The <code>--verbose</code> option shows warnings.</p>"},{"location":"documentation/cli/commands/#examples_1","title":"examples","text":"<p>A listing of a container <pre><code>sld ls https://mypod.org/container/\n</code></pre></p> <p>A listing of a container showing all resources in a long format <pre><code>sld ls --long --all https://mypod.org/container/\n</code></pre></p>"},{"location":"documentation/cli/commands/#copy","title":"Copy","text":"<p>The <code>cp</code> command can copy resources between Solid pod locations, across Solid pods, or between the local file system and a Solid pod. If the source location is a container or directory, it will recursively copy the container and all sub-containers recursively copying the whole underlying resource tree, including empty containers.</p> <p>The default copying behavior ignores <code>.meta</code>, <code>.acl</code> and <code>.acp</code> resources, which can be changed using the <code>--all</code> flag. The default behavior is to overwrite files, the <code>--interactive-override</code> and <code>--no-override</code> options provide alternative behaviors.</p>"},{"location":"documentation/cli/commands/#arguments_2","title":"arguments","text":"<p><pre><code>Arguments:\n  src                         file or directory to be copied\n  dst                         destination to copy file or directory to\n</code></pre> The <code>src</code> argument is the location of the resource or container to be moved. If the URL starts with <code>http(s)://</code>, the resource is assumed to be a remote resource, if not the resource is assumed to be local and matched with the local file system. The <code>dst</code> argument is the destination to which the source resource is to be copied. Similarly it uses the <code>http(s)://</code> prefix to decide if the location is local or remote. The default behavior ignores context resources such as <code>.meta</code>, <code>.acl</code> and <code>.acp</code> present in the directories. The <code>--all</code> flag ignores this behavior, though note that for authorization resources, as the target URIs are not edited, copying resources with these authorization resources does not imply they will result in the same access controls as the location they were copied from! The default behavior always automatically works recursively. At the moment this behavior cannot be altered.</p>"},{"location":"documentation/cli/commands/#options_2","title":"options","text":"<p><pre><code>Options:\n  -a, --all                   Copy .acl files in recursive directory copies\n  -i, --interactive-override  Interactive confirmation prompt when overriding existing resource\n  -n, --no-override           Do not override existing files\n  -v, --verbose               Log all read and write operations\n</code></pre> The <code>--all</code> option includes <code>.meta</code>, <code>.acl</code> and <code>.acp</code> files in the listing.  The <code>--interactive-override</code> option provides an interactive prompt when a copy will override an existing resource.  The <code>--no-override</code> option ignores existing resources.  The <code>--verbose</code> option shows warnings.</p>"},{"location":"documentation/cli/commands/#examples_2","title":"examples","text":"<p>Copying a local resource into a Solid pod container. <pre><code>sld cp /path/to/file https://mypod.org/container/\n</code></pre></p> <p>Copying a local resource to a specific remote resource <pre><code>sld cp /path/to/file.ttl https://mypod.org/container/resource.ttl\n</code></pre></p> <p>Copy the contents of container 1 of alice's pod to container 2 of bob's pod.</p> <pre><code>sld cp https://mypod.org/alice/container1/. https://mypod.org/bob/container2/\n</code></pre> <p>Copy the source container into the target container: <code>https://mypod.org/bob/container2/container1/</code>. <pre><code>sld cp https://mypod.org/alice/container1/ https://mypod.org/bob/container2/\n</code></pre></p> <p>Copy a resource from a solid pod to the local filesystem <pre><code>sld cp https://mypod.org/container/resource.ttl ./resource.ttl\n</code></pre></p>"},{"location":"documentation/cli/commands/#move","title":"Move","text":"<p>The <code>mv</code> command moves resources between Solid pod locations, across Solid pods, or between the local file system and a Solid pod. If the source location is a container or directory, it will recursively move the container and all sub-containers recursively copying the whole underlying resource tree, including empty containers. When moving from the local file system, files will not be deleted!</p> <p>The default copying behavior ignores <code>.meta</code>, <code>.acl</code> and <code>.acp</code> resources, which can be changed using the <code>--all</code> flag. The default behavior is to overwrite files, the <code>--interactive-override</code> and <code>--no-override</code> options provide alternative behaviors. The default behavior always automatically works recursively. At the moment this behavior cannot be altered.</p>"},{"location":"documentation/cli/commands/#arguments_3","title":"arguments","text":"<p><pre><code>Arguments:\n  src                         file or directory to be moved\n  dst                         destination of the move\n</code></pre> The <code>src</code> argument is the location of the resource or container to be moved. If the URL starts with <code>http(s)://</code>, the resource is assumed to be a remote resource, if not the resource is assumed to be local and matched with the local file system. The <code>dst</code> argument is the destination to which the source resource is to be copied. Similarly it uses the <code>http(s)://</code> prefix to decide if the location is local or remote. The default behavior ignores context resources such as <code>.meta</code>, <code>.acl</code> and <code>.acp</code> present in the directories. The <code>--all</code> flag ignores this behavior, though note that for authorization resources, as the target URIs are not edited, copying resources with these authorization resources does not imply they will result in the same access controls as the location they were copied from!</p>"},{"location":"documentation/cli/commands/#options_3","title":"options","text":"<p><pre><code>Options:\n  -a, --all                   Move .acl files when moving directories recursively\n  -i, --interactive-override  Interactive confirmation prompt when overriding existing files\n  -n, --no-override           Do not override existing files\n  -v, --verbose               Log all operations\n</code></pre> The <code>--all</code> option includes <code>.meta</code>, <code>.acl</code> and <code>.acp</code> files in the listing.  The <code>--interactive-override</code> option provides an interactive prompt when a copy will override an existing resource.  The <code>--no-override</code> option ignores existing resources.  The <code>--verbose</code> option shows warnings.</p>"},{"location":"documentation/cli/commands/#examples_3","title":"examples","text":"<p>Moving a local resource into a Solid pod container. This does not remove the local resource! <pre><code>sld mv /path/to/file https://mypod.org/container/\n</code></pre></p> <p>Moving a local resource to a specific remote resource. This does not remove the local resource! <pre><code>sld mv /path/to/file.ttl https://mypod.org/container/resource.ttl\n</code></pre></p> <p>Move the contents of container1 into container2. This removes container 1.</p> <pre><code>sld cp https://mypod.org/alice/container1/. https://mypod.org/bob/container2/\n</code></pre> <p>Move the source container into the target container. <pre><code>sld cp https://mypod.org/alice/container1/ https://mypod.org/bob/container2/container1/\n</code></pre></p> <p>Move a resource from a solid pod to the local filesystem <pre><code>sld cp https://mypod.org/container/resource.ttl ./resource.ttl\n</code></pre></p>"},{"location":"documentation/cli/commands/#remove","title":"Remove","text":"<p>The <code>rm</code> command can remove resources and/or directories from a remote Solid pod.</p>"},{"location":"documentation/cli/commands/#arguments_4","title":"arguments","text":"<p><pre><code>Arguments:\n  urls             URL of container to be listed\n</code></pre> The <code>urls</code> parameter accepts a sequence of urls that need to be removed.</p>"},{"location":"documentation/cli/commands/#options_4","title":"options","text":"<p><pre><code>Options:\n  -r, --recursive  Recursively removes all files in given container (.acl files are removed on resource removal)\n  -v, --verbose    Log all operations\n</code></pre> The <code>--recursive</code> flag must be set when removing container resources. This automatically also removes any contained <code>.acl</code>, <code>.acp</code> and <code>.meta</code> resources.   The <code>--verbose</code> flag outputs operation logs.</p>"},{"location":"documentation/cli/commands/#examples_4","title":"examples","text":"<p>Remove two resources <pre><code>sld rm https://mypod.org/resource1 https://mypod.org/resource2\n</code></pre></p> <p>Remove a container <pre><code>sld rm https://mypod.org/container/\n</code></pre></p>"},{"location":"documentation/cli/commands/#mkdir","title":"Mkdir","text":"<p>The <code>mkdir</code> command creates a new container on a remote Solid pod. The command automatically creates all parent directories that do not exist when specifying a subdirectory to create,  and fails if the target container already exists.</p>"},{"location":"documentation/cli/commands/#arguments_5","title":"arguments","text":"<p><pre><code>Arguments:\n  url            Container to start the search\n</code></pre> The <code>url</code> argument is the target container to be created.</p>"},{"location":"documentation/cli/commands/#options_5","title":"options","text":"<p><pre><code>Options:\n  -v, --verbose  Log all operations\n</code></pre> The <code>--verbose</code> flag outputs operation logs.</p>"},{"location":"documentation/cli/commands/#examples_5","title":"examples","text":"<p>Create a new container <pre><code>sld mkdir https://mypod.org/container/\n</code></pre></p>"},{"location":"documentation/cli/commands/#touch","title":"Touch","text":"<p>The <code>touch</code> command creates an empty resource at the target location. This cannot create containers, for this use the <code>mkdir</code> command. The content type of the created resource is derived from the content type flag or if that is missing from the file extension.  If neither can be found an error is thrown.</p>"},{"location":"documentation/cli/commands/#arguments_6","title":"arguments","text":"<p><pre><code>Arguments:\n  url                          resource to be created\n</code></pre> The <code>url</code> argument is the target resource that is to be created.</p>"},{"location":"documentation/cli/commands/#options_6","title":"options","text":"<p><pre><code>Options:\n  -c, --content-type &lt;string&gt;  Content type of the created resource\n  -v, --verbose                Log all operations\n</code></pre> the <code>--content-type</code> flag provides  The <code>--verbose</code> flag outputs operation logs.</p>"},{"location":"documentation/cli/commands/#examples_6","title":"examples","text":"<p>Create a new resource <pre><code>sld touch --content-type text/turtle https://mypod.org/container/resource\n</code></pre></p>"},{"location":"documentation/cli/commands/#tree","title":"Tree","text":"<p>The <code>tree</code> command provides a tree-structured listing of the target container and all its subcontainers.</p>"},{"location":"documentation/cli/commands/#arguments_7","title":"arguments","text":"<p><pre><code>Arguments:\n  url            Base container to construct tree over\n</code></pre> The <code>url</code> argument is the target container for which the tree listing is to be made.</p>"},{"location":"documentation/cli/commands/#options_7","title":"options","text":"<p><pre><code>Options:\n  -a, --all      Display .acl, .acp and .meta resources\n  -f, --full     Display full resource URIs\n  -v, --verbose  Log all operations\n</code></pre> The <code>--all</code> flag includes the <code>.acl</code>, <code>.acp</code> and <code>.meta</code> context resources in the command output.  The <code>--full</code> flag displays the resulting resources using their full URIs  The <code>--verbose</code> flag outputs operation logs.</p>"},{"location":"documentation/cli/commands/#examples_7","title":"examples","text":"<p>Create tree listing on the root of a Solid pod. <pre><code>sld tree https://mypod.org/\n</code></pre></p>"},{"location":"documentation/cli/commands/#find","title":"Find","text":"<p>The <code>find</code> command can be used to find resources based on their name.</p>"},{"location":"documentation/cli/commands/#arguments_8","title":"arguments","text":"<p><pre><code>Arguments:\n  url            Container to start the search\n  filename       Filename to match, processed as RegExp(filename)\n</code></pre> The <code>url</code> parameter is the container that forms the root of the resource tree in which the search is executed. The <code>filename</code> parameter is the filename to match, processed as a javascript RegExp.</p>"},{"location":"documentation/cli/commands/#options_8","title":"options","text":"<p><pre><code>Options:\n  -a, --all      Match .acl, .acp and .meta files\n  -f, --full     Match full filename.\n  -v, --verbose  Log all operations\n</code></pre> The <code>--all</code> flag also matches access control and metadata files.  The <code>--full</code> flag matches on and returns the full URIs of resources.  The <code>--verbose</code> flag outputs operation logs.</p>"},{"location":"documentation/cli/commands/#examples_8","title":"examples","text":"<p>Find a resource named <code>card</code> in the <code>profile/</code> container. <pre><code>sld find http://mypod.org/profile/ card\n</code></pre></p>"},{"location":"documentation/cli/commands/#query","title":"Query","text":"<p>The <code>query</code> command executes a SPARQL query over a target resource or container. In case a container is queried, all contained resources and subcontainers are recursively queried as well. The query itself is not federated, each query is individually evaluated over every resource. The following resources are included when querying: <code>.ttl, .trig .nt, .nq, .jsonld, .rdf</code> both on their resource extensions and their content type.. The Comunica engine is used for query evaluation. Note that only SELECT queries are supported!</p>"},{"location":"documentation/cli/commands/#arguments_9","title":"arguments","text":"<p><pre><code>Arguments:\n  url              Resource to query. In case of container recursively queries all contained files.\n  query            SPARQL query string | file path containing SPARQL query when -q flag is active\n</code></pre> The <code>url</code> argument is the target resource or container to query. Containers are queried recursively on all contained resources in its resource tree. The <code>query</code> argument is either a SPARQL query in quotes, or the path to a file containing a sparql query if the <code>--queryfile</code> flag has been set.</p>"},{"location":"documentation/cli/commands/#options_9","title":"options","text":"<p><pre><code>Options:\n  -a, --all        Match .acl and .meta files\n  -q, --queryfile  Process query parameter as file path of SPARQL query\n  -p, --pretty     Pretty format\n  -f, --full       Return containing files using full filename.\n  -v, --verbose    Log all operations\n</code></pre> The <code>--all</code> flag includes <code>.acl</code>, <code>.acp</code> and <code>.meta</code> resources in the query targets.  The <code>--queryfile</code> flag changes the <code>query</code> argument to a file path for a resource containing a SPARQL query.  The <code>--pretty</code> flag outputs the results in a table.  The <code>--full</code> flag gives the full resource URIs of where the matches were found.  The <code>--verbose</code> outputs operation logs.</p>"},{"location":"documentation/cli/commands/#examples_9","title":"examples","text":"<p>Evaluating a federated query over all resources in the profile container to look for entites with a given name. <pre><code>sld query https://mypod.org/profile/ \"select ?entity ?name where { ?entity foaf:name ?name }\" --federated \n</code></pre></p> <p>Evaluating a query stored in a local resource over the resources in the profile container individually, including <code>.acl</code>, <code>.acp</code> and <code>.meta</code> resources. <pre><code>sld query --queryfile https://mypod.org/profile/ /path/to/sparql_query_file --all\n</code></pre></p>"},{"location":"documentation/cli/commands/#edit","title":"Edit","text":"<p>The <code>edit</code> command enables the editing of remote resources using a local editor. The command will remain in standby until changes are saved, after which pressing a button in the shell will upload the resource to the Solid pod.</p> <p> Note: there currently is still a bug for longer edits, where saving the changes when a client session has expired will not be able to save the resource back to the pod. This should not be a problem when using client credentials.</p>"},{"location":"documentation/cli/commands/#arguments_10","title":"arguments","text":"<p><pre><code>Arguments:\n  url                                       Resource URL\n</code></pre> The <code>url</code> argument is target resource that will be edited.</p>"},{"location":"documentation/cli/commands/#options_10","title":"options","text":"<p><pre><code>Options:\n  -e, --editor &lt;path_to_editor_executable&gt;  Use custom editor\n  -t, --touch                               Create file if not exists\n  -v, --verbose                             Log all operations\n</code></pre> The <code>--editor</code> option enables the use of a specific local editor to modify the resource.  The <code>--touch</code> option will create the resource if it does not exist yet.  The <code>--verbose</code> option outputs operation logs.</p>"},{"location":"documentation/cli/commands/#examples_10","title":"examples","text":"<p>Editing a resource using the default editor. <pre><code>sld edit https://mypod.org/resource1\n</code></pre></p> <p>Creating and editing a resource using vs-code (code) <pre><code>sld edit --touch --editor code  https://mypod.org/non_existing_resource\n</code></pre></p>"},{"location":"documentation/cli/commands/#access","title":"Access","text":"<p>The <code>access</code> command is used to manage resource access. This is explained in the access management section.</p>"},{"location":"documentation/cli/commands/#auth","title":"Auth","text":"<p>The <code>auth</code> command is used to manage authentication in Bashlib. This is explained in the authentication management section.</p>"},{"location":"documentation/typescript/css-specific/","title":"css specific typescript","text":""},{"location":"documentation/typescript/example-requests/","title":"Example requests ts","text":""},{"location":"documentation/typescript/metadata/","title":"Handling metadata","text":""},{"location":"documentation/typescript/overview/","title":"Overview Usage for Typescript","text":""}]}